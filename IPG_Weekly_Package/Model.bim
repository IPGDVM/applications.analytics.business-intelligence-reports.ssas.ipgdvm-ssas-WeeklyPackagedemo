{
  "name": "SemanticModel",
  "compatibilityLevel": 1400,
  "model": {
    "culture": "en-US",
    "dataSources": [
      {
        "name": "IBI",
        "connectionString": "Provider=MSDASQL;Persist Security Info=False;DSN=iBI DaaS",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      },
      {
        "name": "actis_db",
        "connectionString": "Provider=MSDASQL;DSN=PostgreSQL_actis",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      },
      {
        "type": "structured",
        "name": "AnalysisServices/IPG_Bug intel com;IPG_Bug",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "IPG_Bug.intel.com",
            "database": "IPG_Bug"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount",
          "kind": "AnalysisServices",
          "path": "ipg_bug.intel.com;IPG_Bug"
        }
      },
      {
        "type": "structured",
        "name": "AnalysisServices/IPG_feature intel com;IPG_feature",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "IPG_feature.intel.com",
            "database": "IPG_feature"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount",
          "kind": "AnalysisServices",
          "path": "ipg_feature.intel.com;IPG_feature"
        }
      },
      {
        "type": "structured",
        "name": "AnalysisServices/ipg_tfm intel com;ipg_tfm",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "ipg_tfm.intel.com",
            "database": "ipg_tfm"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount"
        }
      },
      {
        "type": "structured",
        "name": "AnalysisServices/IPG_regression intel com;IPG_regression",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "IPG_regression.intel.com",
            "database": "IPG_regression"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount",
          "kind": "AnalysisServices",
          "path": "ipg_regression.intel.com;IPG_regression"
        }
      },
      {
        "type": "structured",
        "name": "AnalysisServices/IPG_Functional_and_Code_Coverage intel com;IPG_Functional_and_C",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "IPG_Functional_and_Code_Coverage.intel.com",
            "database": "IPG_Functional_and_Code_Coverage"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount",
          "kind": "AnalysisServices",
          "path": "ipg_functional_and_code_coverage.intel.com;IPG_Functional_and_Code_Coverage"
        }
      },
      {
        "type": "structured",
        "name": "AnalysisServices/IPG_TestPlan intel com;IPG_TestPlan",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "IPG_TestPlan.intel.com",
            "database": "IPG_TestPlan"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount",
          "kind": "AnalysisServices",
          "path": "ipg_testplan.intel.com;IPG_TestPlan"
        }
      },
      {
        "type": "structured",
        "name": "AnalysisServices/IPG_IPtoSOC intel com;IPG_IPtoSOC",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "IPG_IPtoSOC.intel.com",
            "database": "IPG_IPtoSOC"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount",
          "kind": "AnalysisServices",
          "path": "ipg_iptosoc.intel.com;IPG_IPtoSOC"
        }
      },
      {
        "type": "structured",
        "name": "AnalysisServices/IPG_ML intel com;IPG_ML",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "IPG_ML.intel.com",
            "database": "IPG_ML"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount",
          "kind": "AnalysisServices",
          "path": "ipg_ml.intel.com;IPG_ML"
        }
      }
    ],
    "tables": [
      {
        "name": "release_central_family",
        "columns": [
          {
            "name": "IpFamilyId",
            "dataType": "string",
            "sourceColumn": "IpFamilyId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IPFamily",
            "dataType": "string",
            "sourceColumn": "IPFamily"
          },
          {
            "name": "Gladius",
            "dataType": "string",
            "sourceColumn": "Gladius",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Product_Owner",
            "dataType": "string",
            "sourceColumn": "Product_Owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Support_Lead",
            "dataType": "string",
            "sourceColumn": "Support_Lead",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Architecture_Lead",
            "dataType": "string",
            "sourceColumn": "Architecture_Lead",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Program_Manager",
            "dataType": "string",
            "sourceColumn": "Program_Manager",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "Product_Owner_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Product_Owner])"
          },
          {
            "type": "calculated",
            "name": "Support_Lead_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Support_Lead])"
          },
          {
            "type": "calculated",
            "name": "Architecture_Lead_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Architecture_Lead])"
          },
          {
            "type": "calculated",
            "name": "Program_Manager_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Program_Manager])"
          },
          {
            "name": "SubOrg",
            "dataType": "string",
            "sourceColumn": "SubOrg"
          },
          {
            "name": "Old Supplier",
            "dataType": "string",
            "sourceColumn": "Old Supplier"
          },
          {
            "name": "Description",
            "dataType": "string",
            "sourceColumn": "Description"
          },
          {
            "type": "calculated",
            "name": "Execution_Lead_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Execution_Lead])"
          },
          {
            "name": "old_family",
            "dataType": "string",
            "sourceColumn": "old_family"
          },
          {
            "name": "IPSupplier",
            "dataType": "string",
            "sourceColumn": "IPSupplier"
          },
          {
            "name": "Execution_Lead",
            "dataType": "string",
            "sourceColumn": "Execution_Lead"
          }
        ],
        "partitions": [
          {
            "name": "release_central_family",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select [IpFamilyId], ",
                "[old_family], ",
                "[devsuborg] as [SubOrg],",
                "[ip_supplier]as [IPSupplier],",
                "[Family] as [IPFamily],   ",
                "[Gladius],",
                "[Description],",
                "[old_supplier]as [Old Supplier],",
                "[Execution_Lead],  [Product_Owner],   [Support_Lead], [Architecture_Lead],  [Program_Manager]",
                "from [v_ipg_family_gladius]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [IpFamilyId], ",
                  "[old_family], ",
                  "[devsuborg] as [SubOrg],",
                  "[ip_supplier]as [IPSupplier],",
                  "[Family] as [IPFamily],   ",
                  "[Gladius],",
                  "[Description],",
                  "[old_supplier]as [Old Supplier],",
                  "[Execution_Lead],  [Product_Owner],   [Support_Lead], [Architecture_Lead],  [Program_Manager]",
                  "from [v_ipg_family_gladius]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select [IpFamilyId], ",
              "[old_family], ",
              "[devsuborg] as [SubOrg],",
              "[ip_supplier]as [IPSupplier],",
              "[Family] as [IPFamily],   ",
              "[Gladius],",
              "[Description],",
              "[old_supplier]as [Old Supplier],",
              "[Execution_Lead],  [Product_Owner],   [Support_Lead], [Architecture_Lead],  [Program_Manager]",
              "from [v_ipg_family_gladius]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "release_central_family"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [IpFamilyId], ",
              "[old_family], ",
              "[devsuborg] as [SubOrg],",
              "[ip_supplier]as [IPSupplier],",
              "[Family] as [IPFamily],   ",
              "[Gladius],",
              "[Description],",
              "[old_supplier]as [Old Supplier],",
              "[Execution_Lead],  [Product_Owner],   [Support_Lead], [Architecture_Lead],  [Program_Manager]",
              "from [v_ipg_family_gladius]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "worker_public",
        "columns": [
          {
            "name": "User_Name",
            "dataType": "string",
            "sourceColumn": "User_Name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "User_WWID",
            "dataType": "string",
            "sourceColumn": "User_WWID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "User_Idsid",
            "dataType": "string",
            "sourceColumn": "User_Idsid",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "worker_public",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
                "from [WORKER_PUBLIC]",
                "where [IsActive] =1",
                "and [ShortID] is not null",
                "group by [ShortID]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
                  "from [WORKER_PUBLIC]",
                  "where [IsActive] =1",
                  "and [ShortID] is not null",
                  "group by [ShortID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
              "from [WORKER_PUBLIC]",
              "where [IsActive] =1",
              "and [ShortID] is not null",
              "group by [ShortID]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "worker_public"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
              "from [WORKER_PUBLIC]",
              "where [IsActive] =1",
              "and [ShortID] is not null",
              "group by [ShortID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "last_refresh",
        "columns": [
          {
            "name": "last_refresh",
            "dataType": "string",
            "sourceColumn": "last_refresh"
          },
          {
            "type": "calculated",
            "name": "last_refresh_time",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[last_Refresh]&\" PST\""
          }
        ],
        "partitions": [
          {
            "name": "last_refresh",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct getutcdate()as [last_refresh]",
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct getutcdate()as [last_refresh]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct getutcdate()as [last_refresh]"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "last_refresh"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct getutcdate()as [last_refresh]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "one_week_late",
        "columns": [
          {
            "name": "one_week_late",
            "dataType": "string",
            "sourceColumn": "one_week_late",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is_one_week_late",
            "dataType": "int64",
            "sourceColumn": "is_one_week_late",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "one_week_late",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  'Yes' as [one_week_late], 1 as [is_one_week_late]",
                "from [v_ipg_carbon_milestone]",
                "union ",
                "select distinct 'No', 0 ",
                "from [v_ipg_carbon_milestone]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  'Yes' as [one_week_late], 1 as [is_one_week_late]",
                  "from [v_ipg_carbon_milestone]",
                  "union ",
                  "select distinct 'No', 0 ",
                  "from [v_ipg_carbon_milestone]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  'Yes' as [one_week_late], 1 as [is_one_week_late]",
              "from [v_ipg_carbon_milestone]",
              "union ",
              "select distinct 'No', 0 ",
              "from [v_ipg_carbon_milestone]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "one_week_late"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  'Yes' as [one_week_late], 1 as [is_one_week_late]",
              "from [v_ipg_carbon_milestone]",
              "union ",
              "select distinct 'No', 0 ",
              "from [v_ipg_carbon_milestone]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "subip_milestone_data",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProductsSummary",
            "dataType": "string",
            "sourceColumn": "UsingProductsSummary",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Revision",
            "dataType": "string",
            "sourceColumn": "Revision",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Drop",
            "dataType": "string",
            "sourceColumn": "Drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Complete",
            "dataType": "string",
            "sourceColumn": "Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DropType",
            "dataType": "string",
            "sourceColumn": "DropType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendExactDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PorExactDate",
            "dataType": "dateTime",
            "sourceColumn": "PorExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "Trend Offset",
            "dataType": "int64",
            "sourceColumn": "Trend Offset",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendChangeReason",
            "dataType": "string",
            "sourceColumn": "TrendChangeReason",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "Carbon Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "name": "Visible",
            "dataType": "string",
            "sourceColumn": "Visible"
          },
          {
            "name": "TrendChangeDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendChangeDate"
          },
          {
            "name": "is_execution_drop",
            "dataType": "int64",
            "sourceColumn": "is_execution_drop"
          },
          {
            "name": "is_standard_drop",
            "dataType": "int64",
            "sourceColumn": "is_standard_drop"
          },
          {
            "name": "is_hotfix",
            "dataType": "int64",
            "sourceColumn": "is_hotfix"
          },
          {
            "name": "is_complete",
            "dataType": "int64",
            "sourceColumn": "is_complete"
          },
          {
            "name": "is_stale",
            "dataType": "int64",
            "sourceColumn": "is_stale"
          },
          {
            "name": "is_late",
            "dataType": "int64",
            "sourceColumn": "is_late"
          },
          {
            "name": "is_2_or_more_weeks_late",
            "dataType": "int64",
            "sourceColumn": "is_2_or_more_weeks_late"
          },
          {
            "name": "trend_in_last_2_weeks",
            "dataType": "int64",
            "sourceColumn": "trend_in_last_2_weeks"
          },
          {
            "name": "subip_is_late",
            "dataType": "int64",
            "sourceColumn": "subip_is_late"
          },
          {
            "name": "subip_is_hotfix",
            "dataType": "int64",
            "sourceColumn": "subip_is_hotfix"
          },
          {
            "name": "subip_is_trending_late",
            "dataType": "int64",
            "sourceColumn": "subip_is_trending_late"
          },
          {
            "name": "sub_ip_filter",
            "dataType": "int64",
            "sourceColumn": "sub_ip_filter"
          },
          {
            "type": "calculated",
            "name": "sub_ip_label",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([subip_is_late] =1,\"Late\",",
              "IF([subip_is_trending_late]=1,\"Trending late\",",
              "IF([subip_is_hotfix] =1,\"Hotfix\"",
              ")))"
            ]
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "IPFamily",
            "dataType": "string",
            "sourceColumn": "IPFamily"
          }
        ],
        "partitions": [
          {
            "name": "subip_milestone_data",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select  [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId],[IpConfigurationId],",
                "[Configuration],[IPFamily],",
                "[Drop],[DropType],[MilestoneId],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffSet] as int) as [Trend OffSet],",
                "[Complete],[UsingProductsSummary],[UsingProducts],[Visible], [Revision],[TrendChangeReason],",
                "case when [TrendChangeDate] is not null and [TrendChangeDate]<>'' then cast([TrendChangeDate] as date) else null end as [TrendChangeDate] ,",
                "case when ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')  then 1 else 2 end as [is_execution_drop],",
                "case when [DropType] = 'Standard' then 1 else 0 end as [is_standard_drop],",
                "case when [DropType] like '%Hotfix%'  or [DropType] like '%Re-Drop%'  then 1 else 0 end as [is_hotfix], ",
                "case when [Complete] = 'Yes' then 1 else 0 end as [is_complete],",
                "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is_stale],",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is_late],",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is_2_or_more_weeks_late],",
                "case when [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [trend_in_last_2_weeks],",
                "case when [is_complete]=1 and [is_late] =1 and [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [subip_is_late],",
                "case when [is_complete]=1 and [is_hotfix] =1 and [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [subip_is_hotfix],",
                "case when [is_complete]=0 and [is_late] =1 and [TrendYYYYWW] >= datepart(ww,getdate())  then 1 else 0 end as [subip_is_trending_late],",
                "case when [subip_is_late] =1 or [subip_is_hotfix] =1 or [subip_is_trending_late] =1 then 1 else 0 end as [sub_ip_filter]",
                "from [V_IPG_CARBON_milestone]",
                "where [Visible] = 'Yes'",
                "and ([complete] = 'No' or ([complete] = 'Yes' and [TrendYYYYWW] >= DATEPART(ww, dateadd(year,-1,GETDATE()))))"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId],[IpConfigurationId],",
                  "[Configuration],[IPFamily],",
                  "[Drop],[DropType],[MilestoneId],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffSet] as int) as [Trend OffSet],",
                  "[Complete],[UsingProductsSummary],[UsingProducts],[Visible], [Revision],[TrendChangeReason],",
                  "case when [TrendChangeDate] is not null and [TrendChangeDate]<>'' then cast([TrendChangeDate] as date) else null end as [TrendChangeDate] ,",
                  "case when ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')  then 1 else 2 end as [is_execution_drop],",
                  "case when [DropType] = 'Standard' then 1 else 0 end as [is_standard_drop],",
                  "case when [DropType] like '%Hotfix%'  or [DropType] like '%Re-Drop%'  then 1 else 0 end as [is_hotfix], ",
                  "case when [Complete] = 'Yes' then 1 else 0 end as [is_complete],",
                  "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is_stale],",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is_late],",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is_2_or_more_weeks_late],",
                  "case when [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [trend_in_last_2_weeks],",
                  "case when [is_complete]=1 and [is_late] =1 and [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [subip_is_late],",
                  "case when [is_complete]=1 and [is_hotfix] =1 and [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [subip_is_hotfix],",
                  "case when [is_complete]=0 and [is_late] =1 and [TrendYYYYWW] >= datepart(ww,getdate())  then 1 else 0 end as [subip_is_trending_late],",
                  "case when [subip_is_late] =1 or [subip_is_hotfix] =1 or [subip_is_trending_late] =1 then 1 else 0 end as [sub_ip_filter]",
                  "from [V_IPG_CARBON_milestone]",
                  "where [Visible] = 'Yes'",
                  "and ([complete] = 'No' or ([complete] = 'Yes' and [TrendYYYYWW] >= DATEPART(ww, dateadd(year,-1,GETDATE()))))</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select  [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId],[IpConfigurationId],",
              "[Configuration],[IPFamily],",
              "[Drop],[DropType],[MilestoneId],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffSet] as int) as [Trend OffSet],",
              "[Complete],[UsingProductsSummary],[UsingProducts],[Visible], [Revision],[TrendChangeReason],",
              "case when [TrendChangeDate] is not null and [TrendChangeDate]<>'' then cast([TrendChangeDate] as date) else null end as [TrendChangeDate] ,",
              "case when ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')  then 1 else 2 end as [is_execution_drop],",
              "case when [DropType] = 'Standard' then 1 else 0 end as [is_standard_drop],",
              "case when [DropType] like '%Hotfix%'  or [DropType] like '%Re-Drop%'  then 1 else 0 end as [is_hotfix], ",
              "case when [Complete] = 'Yes' then 1 else 0 end as [is_complete],",
              "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is_stale],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is_late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is_2_or_more_weeks_late],",
              "case when [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [trend_in_last_2_weeks],",
              "case when [is_complete]=1 and [is_late] =1 and [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [subip_is_late],",
              "case when [is_complete]=1 and [is_hotfix] =1 and [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [subip_is_hotfix],",
              "case when [is_complete]=0 and [is_late] =1 and [TrendYYYYWW] >= datepart(ww,getdate())  then 1 else 0 end as [subip_is_trending_late],",
              "case when [subip_is_late] =1 or [subip_is_hotfix] =1 or [subip_is_trending_late] =1 then 1 else 0 end as [sub_ip_filter]",
              "from [V_IPG_CARBON_milestone]",
              "where [Visible] = 'Yes'",
              "and ([complete] = 'No' or ([complete] = 'Yes' and [TrendYYYYWW] >= DATEPART(ww, dateadd(year,-1,GETDATE()))))"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "subip_milestone_data"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId],[IpConfigurationId],",
              "[Configuration],[IPFamily],",
              "[Drop],[DropType],[MilestoneId],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffSet] as int) as [Trend OffSet],",
              "[Complete],[UsingProductsSummary],[UsingProducts],[Visible], [Revision],[TrendChangeReason],",
              "case when [TrendChangeDate] is not null and [TrendChangeDate]<>'' then cast([TrendChangeDate] as date) else null end as [TrendChangeDate] ,",
              "case when ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')  then 1 else 2 end as [is_execution_drop],",
              "case when [DropType] = 'Standard' then 1 else 0 end as [is_standard_drop],",
              "case when [DropType] like '%Hotfix%'  or [DropType] like '%Re-Drop%'  then 1 else 0 end as [is_hotfix], ",
              "case when [Complete] = 'Yes' then 1 else 0 end as [is_complete],",
              "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is_stale],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is_late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is_2_or_more_weeks_late],",
              "case when [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [trend_in_last_2_weeks],",
              "case when [is_complete]=1 and [is_late] =1 and [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [subip_is_late],",
              "case when [is_complete]=1 and [is_hotfix] =1 and [TrendYYYYWW]between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))  then 1 else 0 end as [subip_is_hotfix],",
              "case when [is_complete]=0 and [is_late] =1 and [TrendYYYYWW] >= datepart(ww,getdate())  then 1 else 0 end as [subip_is_trending_late],",
              "case when [subip_is_late] =1 or [subip_is_hotfix] =1 or [subip_is_trending_late] =1 then 1 else 0 end as [sub_ip_filter]",
              "from [V_IPG_CARBON_milestone]",
              "where [Visible] = 'Yes'",
              "and ([complete] = 'No' or ([complete] = 'Yes' and [TrendYYYYWW] >= DATEPART(ww, dateadd(year,-1,GETDATE()))))</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_subip_milestone_mapping",
        "columns": [
          {
            "name": "ParentConfigName",
            "dataType": "string",
            "sourceColumn": "ParentConfigName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ParentConfigurationId",
            "dataType": "string",
            "sourceColumn": "ParentConfigurationId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ParentMilestoneId",
            "dataType": "string",
            "sourceColumn": "ParentMilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ParentConfigurationId, ParentMilestoneId",
            "dataType": "string",
            "sourceColumn": "ParentConfigurationId, ParentMilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ChildConfigName",
            "dataType": "string",
            "sourceColumn": "ChildConfigName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ChildConfigurationId",
            "dataType": "string",
            "sourceColumn": "ChildConfigurationId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ChildMilestoneId",
            "dataType": "string",
            "sourceColumn": "ChildMilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ChildConfigurationId, ChildMilestoneId",
            "dataType": "string",
            "sourceColumn": "ChildConfigurationId, ChildMilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MappingId",
            "dataType": "string",
            "sourceColumn": "MappingId"
          },
          {
            "type": "calculated",
            "name": "Parent Carbon Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[ParentConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "Child Carbon Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[ChildConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "Parent Carbon Milestone Mapping Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan-mapping/\"&[ParentConfigurationId]",
            "dataCategory": "WebUrl"
          }
        ],
        "partitions": [
          {
            "name": "ip_subip_mapping",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct sub_ip_map.*",
                "from",
                "\t(select distinct [IpConfigurationId]",
                "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
                "\twhere [Org] = 'IPG') as ip",
                "left join",
                "\t(select distinct [MappingId],",
                "\t [ParentConfigName],[ParentConfigurationId],[ParentMilestoneId],",
                "\t[ParentConfigurationId]+', '+[ParentMilestoneId] as [ParentConfigurationId, ParentMilestoneId],",
                "\t[ChildConfigName],[ChildConfigurationId],[ChildMilestoneId],",
                "\t[ChildConfigurationId]+', '+[ChildMilestoneId] as [ChildConfigurationId, ChildMilestoneId]",
                "\tfrom [IPG_CARBON_IP_MILESTONE_MAPPING_WITH_METADATA]) as sub_ip_map",
                "on ip.[IpConfigurationId] =sub_ip_map.[ParentConfigurationId]",
                "where sub_ip_map.[MappingId] is not null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct sub_ip_map.*",
                  "from",
                  "\t(select distinct [IpConfigurationId]",
                  "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
                  "\twhere [Org] = 'IPG') as ip",
                  "left join",
                  "\t(select distinct [MappingId],",
                  "\t [ParentConfigName],[ParentConfigurationId],[ParentMilestoneId],",
                  "\t[ParentConfigurationId]+', '+[ParentMilestoneId] as [ParentConfigurationId, ParentMilestoneId],",
                  "\t[ChildConfigName],[ChildConfigurationId],[ChildMilestoneId],",
                  "\t[ChildConfigurationId]+', '+[ChildMilestoneId] as [ChildConfigurationId, ChildMilestoneId]",
                  "\tfrom [IPG_CARBON_IP_MILESTONE_MAPPING_WITH_METADATA]) as sub_ip_map",
                  "on ip.[IpConfigurationId] =sub_ip_map.[ParentConfigurationId]",
                  "where sub_ip_map.[MappingId] is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct sub_ip_map.*",
              "from",
              "\t(select distinct [IpConfigurationId]",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
              "\twhere [Org] = 'IPG') as ip",
              "left join",
              "\t(select distinct [MappingId],",
              "\t [ParentConfigName],[ParentConfigurationId],[ParentMilestoneId],",
              "\t[ParentConfigurationId]+', '+[ParentMilestoneId] as [ParentConfigurationId, ParentMilestoneId],",
              "\t[ChildConfigName],[ChildConfigurationId],[ChildMilestoneId],",
              "\t[ChildConfigurationId]+', '+[ChildMilestoneId] as [ChildConfigurationId, ChildMilestoneId]",
              "\tfrom [IPG_CARBON_IP_MILESTONE_MAPPING_WITH_METADATA]) as sub_ip_map",
              "on ip.[IpConfigurationId] =sub_ip_map.[ParentConfigurationId]",
              "where sub_ip_map.[MappingId] is not null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_subip_mapping"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct sub_ip_map.*",
              "from",
              "\t(select distinct [IpConfigurationId]",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
              "\twhere [Org] = 'IPG') as ip",
              "left join",
              "\t(select distinct [MappingId],",
              "\t [ParentConfigName],[ParentConfigurationId],[ParentMilestoneId],",
              "\t[ParentConfigurationId]+', '+[ParentMilestoneId] as [ParentConfigurationId, ParentMilestoneId],",
              "\t[ChildConfigName],[ChildConfigurationId],[ChildMilestoneId],",
              "\t[ChildConfigurationId]+', '+[ChildMilestoneId] as [ChildConfigurationId, ChildMilestoneId]",
              "\tfrom [IPG_CARBON_IP_MILESTONE_MAPPING_WITH_METADATA]) as sub_ip_map",
              "on ip.[IpConfigurationId] =sub_ip_map.[ParentConfigurationId]",
              "where sub_ip_map.[MappingId] is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "main",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubDomain",
            "dataType": "string",
            "sourceColumn": "SubDomain",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Org",
            "dataType": "string",
            "sourceColumn": "Org",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubOrg",
            "dataType": "string",
            "sourceColumn": "SubOrg",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Supplier",
            "dataType": "string",
            "sourceColumn": "Supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "LeadProduct",
            "dataType": "string",
            "sourceColumn": "LeadProduct",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "old_IpFamily",
            "dataType": "string",
            "sourceColumn": "old_IpFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpFamilyId",
            "dataType": "int64",
            "sourceColumn": "IpFamilyId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpGeneration",
            "dataType": "string",
            "sourceColumn": "IpGeneration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AffectedProducts",
            "dataType": "string",
            "sourceColumn": "AffectedProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "RequestingProducts",
            "dataType": "string",
            "sourceColumn": "RequestingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpType",
            "dataType": "string",
            "sourceColumn": "IpType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IsRequestable",
            "dataType": "string",
            "sourceColumn": "IsRequestable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Lifecycle",
            "dataType": "string",
            "sourceColumn": "Lifecycle",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Node",
            "dataType": "string",
            "sourceColumn": "Node",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Process",
            "dataType": "string",
            "sourceColumn": "Process",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Reuse",
            "dataType": "string",
            "sourceColumn": "Reuse",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Drop",
            "dataType": "string",
            "sourceColumn": "Drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DropType",
            "dataType": "string",
            "sourceColumn": "DropType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendExactDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PorExactDate",
            "dataType": "dateTime",
            "sourceColumn": "PorExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "Trend OffSet",
            "dataType": "int64",
            "sourceColumn": "Trend OffSet",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Complete",
            "dataType": "string",
            "sourceColumn": "Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProductsSummary",
            "dataType": "string",
            "sourceColumn": "UsingProductsSummary",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Visible",
            "dataType": "string",
            "sourceColumn": "Visible",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Revision",
            "dataType": "string",
            "sourceColumn": "Revision",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendChangeReason",
            "dataType": "string",
            "sourceColumn": "TrendChangeReason",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendChangeDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendChangeDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "is_execution_drop",
            "dataType": "int64",
            "sourceColumn": "is_execution_drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is_standard_drop",
            "dataType": "int64",
            "sourceColumn": "is_standard_drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is_hotfix",
            "dataType": "int64",
            "sourceColumn": "is_hotfix",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is_pcr_standard_tech",
            "dataType": "int64",
            "sourceColumn": "is_pcr_standard_tech",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is_complete",
            "dataType": "int64",
            "sourceColumn": "is_complete",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is_late",
            "dataType": "int64",
            "sourceColumn": "is_late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is_2_or_more_weeks_late",
            "dataType": "int64",
            "sourceColumn": "is_2_or_more_weeks_late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Late Reason",
            "dataType": "string",
            "sourceColumn": "Late Reason",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Redrop Reason",
            "dataType": "string",
            "sourceColumn": "Redrop Reason",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Mitigation",
            "dataType": "string",
            "sourceColumn": "Mitigation",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Future Prevention",
            "dataType": "string",
            "sourceColumn": "Future Prevention",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Impact",
            "dataType": "string",
            "sourceColumn": "Impact",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Domain",
            "dataType": "string",
            "sourceColumn": "Domain",
            "sortByColumn": "DomainOrder",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DomainOrder",
            "dataType": "int64",
            "sourceColumn": "DomainOrder"
          },
          {
            "name": "IndicatorId",
            "dataType": "string",
            "sourceColumn": "IndicatorId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Indicator",
            "dataType": "string",
            "sourceColumn": "Indicator",
            "sortByColumn": "IndicatorOrder",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IndicatorOrder",
            "dataType": "int64",
            "sourceColumn": "IndicatorOrder"
          },
          {
            "name": "pas_filter",
            "dataType": "int64",
            "sourceColumn": "pas_filter"
          },
          {
            "name": "redrop_filter",
            "dataType": "int64",
            "sourceColumn": "redrop_filter"
          },
          {
            "name": "past_por_filter",
            "dataType": "int64",
            "sourceColumn": "past_por_filter"
          },
          {
            "name": "is_stale",
            "dataType": "int64",
            "sourceColumn": "is_stale"
          },
          {
            "name": "stale_drop_filter",
            "dataType": "int64",
            "sourceColumn": "stale_drop_filter"
          },
          {
            "type": "calculated",
            "name": "indicator_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH(main[IndicatorId_int],",
              "13,[pas_filter],",
              "5,[redrop_filter],",
              "14,[past_por_filter],",
              "11,[stale_drop_filter],",
              "15,[sub_ip_filter],",
              "7,[showstopper_bugs_filter],",
              "3,[post_si_filter],",
              "4,[pre_si_found_by_soc_filter],",
              "8,[tfm_filter],",
              "6,[features_active_total_filter],",
              "19,[pearl_filter],",
              "18,[response_sla_filter],",
              "17,[resolution_sla_filter],",
              "12,[effective_buffer_filter],",
              "9,[val_metrics_filter],",
              "21,[val_metrics_filter],",
              "22,[val_metrics_filter],",
              "20,[doc_filter]",
              ")",
              ""
            ]
          },
          {
            "name": "por_in_future",
            "dataType": "int64",
            "sourceColumn": "por_in_future"
          },
          {
            "type": "calculated",
            "name": "dummy_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "carbon_milestone_link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\" &[IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "pas_label",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is_late] =1, \"Late\",\"On time\")"
          },
          {
            "type": "calculated",
            "name": "redrop_label",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is_hotfix] =1, \"Hotfix\",\"Not hotfix\")"
          },
          {
            "type": "calculated",
            "name": "past_por_label",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([por_in_future]=1,\"Future\",\"Current\")"
          },
          {
            "type": "calculated",
            "name": "stale_label",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is_stale]=1,\"Stale\",\"Not stale\")"
          },
          {
            "type": "calculated",
            "name": "drill_url",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(main[IndicatorId_int],",
              "13,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection71327abac874352ac08a\",",
              "5, \"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection849d30d8950b37853200\",",
              "14,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection940c29a386416091c9ba\",",
              "11,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection26ebcb2703112b03911e\",",
              "8,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection5ae373a729ba733d92a5\",",
              "7,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSectiondf283a18b398c1689513\",",
              "3,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection7674d63055e200da813b\",",
              "4,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSectionf03575969d662bc90258\",",
              "15,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSectiondac2974a855d04477cc6\",",
              "6,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSectionb690c460597255c323f3\",",
              "19,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSectiona6fbea55c90b783a504a\",",
              "18,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection7f015370c39da90234d5\",",
              "17,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection43178a383a2c2c3ca922\",",
              "12,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection4a6ccde245f6ded49ca8\",",
              "20,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSectionc5ff3d6d23cdb915e381\",",
              "9,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection1c4ce46e0d52031b7757\",",
              "21,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSectionb23058379e8d85250003\",",
              "22,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/4c57d55a-2a5d-4185-9235-4b9b31a603d3/ReportSection86f7f4aac50d8e002ea8\",",
              "16,\"https://app.powerbi.com/groups/me/apps/0f11b9ae-5ef1-4898-825b-b69afa7cdaa9/reports/f27df7ac-f32b-4854-be1b-c94d63a915a1/ReportSection55fdf9bb0e4dcb758169\"",
              ")",
              "",
              "",
              ""
            ],
            "dataCategory": "WebUrl"
          },
          {
            "name": "Description",
            "dataType": "string",
            "sourceColumn": "Description"
          },
          {
            "name": "Timeframe",
            "dataType": "string",
            "sourceColumn": "Timeframe"
          },
          {
            "name": "Green",
            "dataType": "string",
            "sourceColumn": "Green"
          },
          {
            "name": "Yellow",
            "dataType": "string",
            "sourceColumn": "Yellow"
          },
          {
            "name": "Red",
            "dataType": "string",
            "sourceColumn": "Red"
          },
          {
            "type": "calculated",
            "name": "Description_with_timeframe",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "[Indicator]",
              "&\": \"&",
              "[Description]",
              "",
              ""
            ]
          },
          {
            "name": "HSDES_Tenant",
            "dataType": "string",
            "sourceColumn": "HSDES_Tenant"
          },
          {
            "name": "sub_ip_filter",
            "dataType": "int64",
            "sourceColumn": "sub_ip_filter"
          },
          {
            "name": "tfm_filter",
            "dataType": "int64",
            "sourceColumn": "tfm_filter"
          },
          {
            "name": "pearl_filter",
            "dataType": "int64",
            "sourceColumn": "pearl_filter"
          },
          {
            "name": "pre_si_found_by_soc_filter",
            "dataType": "int64",
            "sourceColumn": "pre_si_found_by_soc_filter"
          },
          {
            "name": "post_si_filter",
            "dataType": "int64",
            "sourceColumn": "post_si_filter"
          },
          {
            "name": "features_active_total_filter",
            "dataType": "int64",
            "sourceColumn": "features_active_total_filter"
          },
          {
            "name": "showstopper_bugs_filter",
            "dataType": "int64",
            "sourceColumn": "showstopper_bugs_filter"
          },
          {
            "name": "response_sla_filter",
            "dataType": "int64",
            "sourceColumn": "response_sla_filter"
          },
          {
            "name": "resolution_sla_filter",
            "dataType": "int64",
            "sourceColumn": "resolution_sla_filter"
          },
          {
            "name": "effective_buffer",
            "dataType": "int64",
            "sourceColumn": "effective_buffer"
          },
          {
            "name": "effective_buffer_classification",
            "dataType": "string",
            "sourceColumn": "effective_buffer_classification"
          },
          {
            "name": "effective_buffer_filter",
            "dataType": "int64",
            "sourceColumn": "effective_buffer_filter"
          },
          {
            "type": "calculated",
            "name": "effective_buffer_classification_int",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(main[effective_buffer_classification],",
              "\"red\",1,",
              "\"yellow\",2,",
              "\"green\",3",
              ")"
            ]
          },
          {
            "name": "Bucket",
            "dataType": "string",
            "sourceColumn": "Bucket"
          },
          {
            "name": "BucketOrder",
            "dataType": "int64",
            "sourceColumn": "BucketOrder"
          },
          {
            "name": "BucketId",
            "dataType": "string",
            "sourceColumn": "BucketId"
          },
          {
            "type": "calculated",
            "name": "BucketValue",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(main[BucketOrder],",
              "1,\" \",",
              "5,\"  \",",
              "10, \"   \"",
              ")"
            ],
            "sortByColumn": "BucketOrder"
          },
          {
            "name": "val_metrics_filter",
            "dataType": "int64",
            "sourceColumn": "val_metrics_filter"
          },
          {
            "name": "doc_filter",
            "dataType": "int64",
            "sourceColumn": "doc_filter"
          },
          {
            "name": "HAS",
            "dataType": "string",
            "sourceColumn": "HAS"
          },
          {
            "name": "Integration Guide",
            "dataType": "string",
            "sourceColumn": "Integration Guide"
          },
          {
            "name": "is missing HAS",
            "dataType": "int64",
            "sourceColumn": "is missing HAS"
          },
          {
            "name": "is missing Integration Guide",
            "dataType": "int64",
            "sourceColumn": "is missing Integration Guide"
          },
          {
            "name": "is_missing_doc",
            "dataType": "int64",
            "sourceColumn": "is_missing_doc"
          },
          {
            "type": "calculated",
            "name": "IndicatorId_int",
            "dataType": "int64",
            "expression": "VALUE([IndicatorId])"
          },
          {
            "type": "calculated",
            "name": "BucketId_int",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "VALUE([BucketId])"
          },
          {
            "name": "ip_schedule_contact",
            "dataType": "string",
            "sourceColumn": "ip_schedule_contact"
          },
          {
            "name": "incomplete_drop_in_next_8_weeks",
            "dataType": "int64",
            "sourceColumn": "incomplete_drop_in_next_8_weeks"
          },
          {
            "type": "calculated",
            "name": "LQDashLatestVal",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(MAX(LQ_Data[color_category]),FILTER(LQ_Data,LQ_Data[Configuration_Id]=main[IpConfigurationId]&&LQ_Data[latest]=\"latest\"))"
          }
        ],
        "partitions": [
          {
            "name": "main",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct ip.*,",
                "milestone.[IpConfigurationId, MilestoneId],",
                "milestone.[Drop],milestone.[DropType],milestone.[MilestoneId],milestone.[TrendYYYYWW],milestone.[TrendExactDate],milestone.[PorYYYYWW],milestone.[PorExactDate],milestone.[Trend OffSet],",
                "milestone.[Complete],milestone.[UsingProductsSummary],milestone.[UsingProducts],milestone.[Visible], milestone.[Revision],milestone.[TrendChangeReason],milestone.[TrendChangeDate] ,",
                "milestone.[is_execution_drop], milestone.[is_standard_drop], milestone.[is_hotfix],  milestone.[is_pcr_standard_tech], milestone.[is_complete], milestone.[is_stale],milestone.[is_late], milestone.[is_2_or_more_weeks_late],",
                "milestone.[por_in_future],milestone.[incomplete_drop_in_next_8_weeks],",
                "milestone.[effective_buffer],milestone.[effective_buffer_classification],",
                "retrospective.[Late Reason], retrospective.[Redrop Reason],retrospective.[Mitigation],retrospective.[Future Prevention],retrospective.[Impact],",
                "docs.[HAS],docs.[Integration Guide],",
                "contact.[ip_schedule_contact],",
                "case when docs.[HAS] is null then 1 else 0 end as [is missing HAS],",
                "case when docs.[Integration Guide] is null then 1 else 0 end as [is missing Integration Guide],",
                "case when  [is missing HAS] =1 or [is missing Integration Guide]=1 then 1 else 0 end as [is_missing_doc],",
                "indicator.[Domain],indicator.[DomainOrder],indicator.[BucketId],indicator.[Bucket],indicator.[BucketOrder],indicator.[IndicatorId],indicator.[Indicator],indicator.[IndicatorOrder],indicator.[Description],indicator.[Timeframe],indicator.[Green],indicator.[Yellow],indicator.[Red],",
                "",
                "-- pas",
                "case when indicator.[IndicatorId] = 13 and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate())) and",
                "milestone.[PorYYYYWW] is not null and milestone.[DropType] not like '%Hotfix%' and [DropType] not like '%Re-Drop%' and milestone.[Complete] = 'Yes' then 1 else 2 end as [pas_filter],",
                "-- redrop ",
                "case when indicator.[IndicatorId] = 5 and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate())) and",
                "milestone.[DropType] not like '%Early%' and milestone.[Complete] = 'Yes'  then 1 else 2 end as [redrop_filter],",
                "-- past_por ",
                "case when indicator.[IndicatorId] = 14 and   milestone.[Complete] = 'No' and milestone.[is_late] =1  then 1 else 2 end as [past_por_filter],",
                "-- stale_drops",
                "case when indicator.[IndicatorId] = 11  and milestone.[is_stale] =1  and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-8,getdate())) and datepart(ww,dateadd(week,-1,getdate()))",
                "then 1 else 2 end as [stale_drop_filter],",
                "-- sub_ip",
                "case when indicator.[IndicatorId] = 15  then 1 else 2 end as [sub_ip_filter],",
                "-- tfm",
                "case when indicator.[IndicatorId] = 8  then 1 else 2 end as [tfm_filter],",
                "-- pearl",
                "case when indicator.[IndicatorId] = 19  and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))",
                "then 1 else 2 end as [pearl_filter],",
                "-- pre_si_found_by_soc",
                "case when indicator.[IndicatorId] = 4  then 1 else 2 end as [pre_si_found_by_soc_filter],",
                "-- post_si",
                "case when indicator.[IndicatorId] = 3  then 1 else 2 end as [post_si_filter],",
                "-- features_active_total",
                "case when indicator.[IndicatorId] = 6  then 1 else 2 end as [features_active_total_filter],",
                "-- showstopper_bugs",
                "case when indicator.[IndicatorId] = 7  then 1 else 2 end as [showstopper_bugs_filter],",
                "-- response_sla",
                "case when indicator.[IndicatorId] = 18  then 1 else 2 end as [response_sla_filter],",
                "-- resolution_sla",
                "case when indicator.[IndicatorId] = 17  then 1 else 2 end as [resolution_sla_filter],",
                "-- effective_buffer ",
                "case when indicator.[IndicatorId] = 12 and milestone.[PorYYYYWW] between datepart(ww,dateadd(week,3,getdate())) and datepart(ww,dateadd(week,15,getdate())) and",
                "milestone.[TrendYYYYWW] >0  and  milestone.[DropType] not like '%Early%' and milestone.[Complete] = 'No'  then 1 else 2 end as [effective_buffer_filter],",
                "-- val_metrics ",
                "case when indicator.[IndicatorId] in (9,21,22) and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(month,6,getdate())) and",
                "[Complete] = 'No' then 1 else 2 end as [val_metrics_filter],",
                "-- doc",
                "case when indicator.[IndicatorId] =20 and [Complete] = 'No' and [DropType] like '%Standard%' and",
                "(milestone.[TrendYYYYWW]>= datepart(ww,dateadd(week,-26,getdate())) or milestone.[TrendYYYYWW]>= datepart(ww,dateadd(month,-26,getdate())) )then 1 else 2 end as [doc_filter]",
                "from",
                "\t(select [IpConfigurationId],[Name] as[Configuration],",
                "\t[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[IpFamily] as [old_IpFamily],[IpFamilyId],[IpGeneration],",
                "\t[AffectedProducts],[RequestingProducts],",
                "\t[IpType],[IsRequestable],[Lifecycle],[Node],[Process],[Reuse],[SupplierHsdTenant]as [HSDES_Tenant]",
                "\tfrom  [V_IPG_CARBON_IPCONFIGURATION]",
                "\twhere [Org] ='IPG' ",
                "\tand [Configuration] not like '%dummy%'",
                "\tand [Configuration] not like '%demo%'",
                "\t--and [IsRequestable] = 'yes'",
                "\t)ip",
                "left join ",
                "              (select  [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId],[IpConfigurationId],",
                "[Drop],[DropType],[MilestoneId],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffSet] as int) as [Trend OffSet],",
                "              [Complete],[UsingProductsSummary],[UsingProducts],[Visible], [Revision],[TrendChangeReason],",
                "              case when [TrendChangeDate] is not null and [TrendChangeDate]<>'' then cast([TrendChangeDate] as date) else null end as [TrendChangeDate] ,",
                "              case when ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')  then 1 else 2 end as [is_execution_drop],",
                "              case when [DropType] = 'Standard' then 1 else 0 end as [is_standard_drop],",
                "              case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is_hotfix], ",
                "              case when [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange') then 1 else 0  END as  [is_pcr_standard_tech],",
                "              case when [Complete] = 'Yes' then 1 else 0 end as [is_complete],",
                "              case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is_stale],",
                "              case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is_late],",
                "              case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is_2_or_more_weeks_late],",
                "              case when [PorYYYYWW] >= datepart(ww,getdate()) then 1 else 0 end as [por_in_future],",
                "              case when [TrendYYYYWW] between datepart(ww,getutcdate()) and  datepart(ww,dateadd(week, 8, getdate())) and [Complete] = 'No' then 1 else 0 end as [incomplete_drop_in_next_8_weeks],",
                "              case when [TrendYYYYWW] = datepart(ww,getutcdate()) then 1 else  datediff(week,getutcdate(),[TrendExactDate]) end *1.0 as [trend_minus_today_with_zero],",
                "\tcase when [trend_minus_today_with_zero] =0 or [trend_minus_today_with_zero] is null then 1 else [trend_minus_today_with_zero] end *1.0 as [trend_minus_today] ,",
                "              round(case when [PorYYYYWW] is null or [TrendYYYYWW] is null then null else cast([Trend OffSet]as double)/[trend_minus_today] end  * 100,0) as [effective_buffer],",
                "              CASE WHEN [effective_buffer] is null THEN null WHEN [effective_buffer]<=10 THEN 'red'WHEN [effective_buffer]<=20 THEN 'yellow' ELSE  'green'END as [effective_buffer_classification]",
                "              from [V_IPG_CARBON_milestone]",
                "              where [DevOrg] = 'IPG'",
                "              and [Visible] = 'Yes'",
                "              and ([complete] = 'No' or ([complete] = 'Yes' and [TrendYYYYWW] >= DATEPART(ww, dateadd(month,-2,GETDATE()))))  ",
                "              and ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')",
                "              ) as milestone",
                "on ip.[IpConfigurationId]= milestone.[IpConfigurationId]",
                "left join",
                "              (select  [MilestoneId],",
                "              max(case when [CommentType]  ='Late Reason' then [Summary] else null end )as [Late Reason],",
                "              max(case when [CommentType]  ='Redrop Reason' then [Summary] else null end )as [Redrop Reason],",
                "              max(case when [CommentType]  ='Mitigation' then [Summary] else null end )as [Mitigation],",
                "              max(case when [CommentType]  ='Future Prevention' then [Summary] else null end)as [Future Prevention],",
                "              max(case when [CommentType]  ='Impact' then [Summary] else null end )as [Impact]",
                "             from [V_IPG_CARBON_MILESTONE_COMMENT_SUMMARY_WITH_AREA] ",
                "              where [CommentType] in ( 'Late Reason','Redrop Reason','Mitigation','Future Prevention','Impact') ",
                "              and [Summary] is not null",
                "              group by [MilestoneId])retrospective",
                "on milestone.[MilestoneId] = retrospective.[MilestoneId] ",
                "left join",
                "\t(select distinct[IpConfigurationId],",
                "\tmax(case when [key]= 'HAS' then [value] end) as [HAS],",
                "\tmax(case when [key]in ('Integration Guide','Integration Guide XLS') then [value] end) as [Integration Guide]",
                "\tfrom[V_IPG_CARBON_IP_CONFIGURATION_ATTRIBUTE]",
                "\twhere[key] in ('HAS','Integration Guide','Integration Guide XLS' )",
                "\tgroup by [IpConfigurationId]) as docs",
                "on ip.[IpConfigurationId]=docs.[IpConfigurationId]",
                "left join",
                "\t(select distinct [IpConfigurationID], [Idsid] as [ip_schedule_contact]",
                "\tfrom [V_IPG_CARBON_CONTACTS]",
                "\twhere  [Caption]= 'IP Schedule Contact'",
                "\tand [IpConfigurationID] is not null",
                "\tand [Idsid]is not null) as contact",
                "on ip.[IpConfigurationId]=contact.[IpConfigurationId]",
                "left join",
                "\t(select [Domain],[IndicatorId],[Indicator],[BucketId],[Bucket],",
                "\tcast([BucketOrder]as int)as [BucketOrder],",
                "\tcast([IndicatorOrder]as int)as[IndicatorOrder],",
                "\tcast([DomainOrder]as int)as [DomainOrder],",
                "\t[Description],[Timeframe],[Green],[Yellow],[Red]",
                "\tfrom [ipg_weekly_package_vectors]",
                "\twhere [Visible] = 1  ",
                "\t) as indicator",
                "on 1=1"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ip.*,",
                  "milestone.[IpConfigurationId, MilestoneId],",
                  "milestone.[Drop],milestone.[DropType],milestone.[MilestoneId],milestone.[TrendYYYYWW],milestone.[TrendExactDate],milestone.[PorYYYYWW],milestone.[PorExactDate],milestone.[Trend OffSet],",
                  "milestone.[Complete],milestone.[UsingProductsSummary],milestone.[UsingProducts],milestone.[Visible], milestone.[Revision],milestone.[TrendChangeReason],milestone.[TrendChangeDate] ,",
                  "milestone.[is_execution_drop], milestone.[is_standard_drop], milestone.[is_hotfix],  milestone.[is_pcr_standard_tech], milestone.[is_complete], milestone.[is_stale],milestone.[is_late], milestone.[is_2_or_more_weeks_late],",
                  "milestone.[por_in_future],milestone.[incomplete_drop_in_next_8_weeks],",
                  "milestone.[effective_buffer],milestone.[effective_buffer_classification],",
                  "retrospective.[Late Reason], retrospective.[Redrop Reason],retrospective.[Mitigation],retrospective.[Future Prevention],retrospective.[Impact],",
                  "docs.[HAS],docs.[Integration Guide],",
                  "contact.[ip_schedule_contact],",
                  "case when docs.[HAS] is null then 1 else 0 end as [is missing HAS],",
                  "case when docs.[Integration Guide] is null then 1 else 0 end as [is missing Integration Guide],",
                  "case when  [is missing HAS] =1 or [is missing Integration Guide]=1 then 1 else 0 end as [is_missing_doc],",
                  "indicator.[Domain],indicator.[DomainOrder],indicator.[BucketId],indicator.[Bucket],indicator.[BucketOrder],indicator.[IndicatorId],indicator.[Indicator],indicator.[IndicatorOrder],indicator.[Description],indicator.[Timeframe],indicator.[Green],indicator.[Yellow],indicator.[Red],",
                  "",
                  "-- pas",
                  "case when indicator.[IndicatorId] = 13 and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate())) and",
                  "milestone.[PorYYYYWW] is not null and milestone.[DropType] not like '%Hotfix%' and [DropType] not like '%Re-Drop%' and milestone.[Complete] = 'Yes' then 1 else 2 end as [pas_filter],",
                  "-- redrop ",
                  "case when indicator.[IndicatorId] = 5 and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate())) and",
                  "milestone.[DropType] not like '%Early%' and milestone.[Complete] = 'Yes'  then 1 else 2 end as [redrop_filter],",
                  "-- past_por ",
                  "case when indicator.[IndicatorId] = 14 and   milestone.[Complete] = 'No' and milestone.[is_late] =1  then 1 else 2 end as [past_por_filter],",
                  "-- stale_drops",
                  "case when indicator.[IndicatorId] = 11  and milestone.[is_stale] =1  and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-8,getdate())) and datepart(ww,dateadd(week,-1,getdate()))",
                  "then 1 else 2 end as [stale_drop_filter],",
                  "-- sub_ip",
                  "case when indicator.[IndicatorId] = 15  then 1 else 2 end as [sub_ip_filter],",
                  "-- tfm",
                  "case when indicator.[IndicatorId] = 8  then 1 else 2 end as [tfm_filter],",
                  "-- pearl",
                  "case when indicator.[IndicatorId] = 19  and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))",
                  "then 1 else 2 end as [pearl_filter],",
                  "-- pre_si_found_by_soc",
                  "case when indicator.[IndicatorId] = 4  then 1 else 2 end as [pre_si_found_by_soc_filter],",
                  "-- post_si",
                  "case when indicator.[IndicatorId] = 3  then 1 else 2 end as [post_si_filter],",
                  "-- features_active_total",
                  "case when indicator.[IndicatorId] = 6  then 1 else 2 end as [features_active_total_filter],",
                  "-- showstopper_bugs",
                  "case when indicator.[IndicatorId] = 7  then 1 else 2 end as [showstopper_bugs_filter],",
                  "-- response_sla",
                  "case when indicator.[IndicatorId] = 18  then 1 else 2 end as [response_sla_filter],",
                  "-- resolution_sla",
                  "case when indicator.[IndicatorId] = 17  then 1 else 2 end as [resolution_sla_filter],",
                  "-- effective_buffer ",
                  "case when indicator.[IndicatorId] = 12 and milestone.[PorYYYYWW] between datepart(ww,dateadd(week,3,getdate())) and datepart(ww,dateadd(week,15,getdate())) and",
                  "milestone.[TrendYYYYWW] >0  and  milestone.[DropType] not like '%Early%' and milestone.[Complete] = 'No'  then 1 else 2 end as [effective_buffer_filter],",
                  "-- val_metrics ",
                  "case when indicator.[IndicatorId] in (9,21,22) and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(month,6,getdate())) and",
                  "[Complete] = 'No' then 1 else 2 end as [val_metrics_filter],",
                  "-- doc",
                  "case when indicator.[IndicatorId] =20 and [Complete] = 'No' and [DropType] like '%Standard%' and",
                  "(milestone.[TrendYYYYWW]>= datepart(ww,dateadd(week,-26,getdate())) or milestone.[TrendYYYYWW]>= datepart(ww,dateadd(month,-26,getdate())) )then 1 else 2 end as [doc_filter]",
                  "from",
                  "\t(select [IpConfigurationId],[Name] as[Configuration],",
                  "\t[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[IpFamily] as [old_IpFamily],[IpFamilyId],[IpGeneration],",
                  "\t[AffectedProducts],[RequestingProducts],",
                  "\t[IpType],[IsRequestable],[Lifecycle],[Node],[Process],[Reuse],[SupplierHsdTenant]as [HSDES_Tenant]",
                  "\tfrom  [V_IPG_CARBON_IPCONFIGURATION]",
                  "\twhere [Org] ='IPG' ",
                  "\tand [Configuration] not like '%dummy%'",
                  "\tand [Configuration] not like '%demo%'",
                  "\t--and [IsRequestable] = 'yes'",
                  "\t)ip",
                  "left join ",
                  "              (select  [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId],[IpConfigurationId],",
                  "[Drop],[DropType],[MilestoneId],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffSet] as int) as [Trend OffSet],",
                  "              [Complete],[UsingProductsSummary],[UsingProducts],[Visible], [Revision],[TrendChangeReason],",
                  "              case when [TrendChangeDate] is not null and [TrendChangeDate]<>'' then cast([TrendChangeDate] as date) else null end as [TrendChangeDate] ,",
                  "              case when ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')  then 1 else 2 end as [is_execution_drop],",
                  "              case when [DropType] = 'Standard' then 1 else 0 end as [is_standard_drop],",
                  "              case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is_hotfix], ",
                  "              case when [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange') then 1 else 0  END as  [is_pcr_standard_tech],",
                  "              case when [Complete] = 'Yes' then 1 else 0 end as [is_complete],",
                  "              case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is_stale],",
                  "              case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is_late],",
                  "              case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is_2_or_more_weeks_late],",
                  "              case when [PorYYYYWW] >= datepart(ww,getdate()) then 1 else 0 end as [por_in_future],",
                  "              case when [TrendYYYYWW] between datepart(ww,getutcdate()) and  datepart(ww,dateadd(week, 8, getdate())) and [Complete] = 'No' then 1 else 0 end as [incomplete_drop_in_next_8_weeks],",
                  "              case when [TrendYYYYWW] = datepart(ww,getutcdate()) then 1 else  datediff(week,getutcdate(),[TrendExactDate]) end *1.0 as [trend_minus_today_with_zero],",
                  "\tcase when [trend_minus_today_with_zero] =0 or [trend_minus_today_with_zero] is null then 1 else [trend_minus_today_with_zero] end *1.0 as [trend_minus_today] ,",
                  "              round(case when [PorYYYYWW] is null or [TrendYYYYWW] is null then null else cast([Trend OffSet]as double)/[trend_minus_today] end  * 100,0) as [effective_buffer],",
                  "              CASE WHEN [effective_buffer] is null THEN null WHEN [effective_buffer]<=10 THEN 'red'WHEN [effective_buffer]<=20 THEN 'yellow' ELSE  'green'END as [effective_buffer_classification]",
                  "              from [V_IPG_CARBON_milestone]",
                  "              where [DevOrg] = 'IPG'",
                  "              and [Visible] = 'Yes'",
                  "              and ([complete] = 'No' or ([complete] = 'Yes' and [TrendYYYYWW] >= DATEPART(ww, dateadd(month,-2,GETDATE()))))  ",
                  "              and ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')",
                  "              ) as milestone",
                  "on ip.[IpConfigurationId]= milestone.[IpConfigurationId]",
                  "left join",
                  "              (select  [MilestoneId],",
                  "              max(case when [CommentType]  ='Late Reason' then [Summary] else null end )as [Late Reason],",
                  "              max(case when [CommentType]  ='Redrop Reason' then [Summary] else null end )as [Redrop Reason],",
                  "              max(case when [CommentType]  ='Mitigation' then [Summary] else null end )as [Mitigation],",
                  "              max(case when [CommentType]  ='Future Prevention' then [Summary] else null end)as [Future Prevention],",
                  "              max(case when [CommentType]  ='Impact' then [Summary] else null end )as [Impact]",
                  "             from [V_IPG_CARBON_MILESTONE_COMMENT_SUMMARY_WITH_AREA] ",
                  "              where [CommentType] in ( 'Late Reason','Redrop Reason','Mitigation','Future Prevention','Impact') ",
                  "              and [Summary] is not null",
                  "              group by [MilestoneId])retrospective",
                  "on milestone.[MilestoneId] = retrospective.[MilestoneId] ",
                  "left join",
                  "\t(select distinct[IpConfigurationId],",
                  "\tmax(case when [key]= 'HAS' then [value] end) as [HAS],",
                  "\tmax(case when [key]in ('Integration Guide','Integration Guide XLS') then [value] end) as [Integration Guide]",
                  "\tfrom[V_IPG_CARBON_IP_CONFIGURATION_ATTRIBUTE]",
                  "\twhere[key] in ('HAS','Integration Guide','Integration Guide XLS' )",
                  "\tgroup by [IpConfigurationId]) as docs",
                  "on ip.[IpConfigurationId]=docs.[IpConfigurationId]",
                  "left join",
                  "\t(select distinct [IpConfigurationID], [Idsid] as [ip_schedule_contact]",
                  "\tfrom [V_IPG_CARBON_CONTACTS]",
                  "\twhere  [Caption]= 'IP Schedule Contact'",
                  "\tand [IpConfigurationID] is not null",
                  "\tand [Idsid]is not null) as contact",
                  "on ip.[IpConfigurationId]=contact.[IpConfigurationId]",
                  "left join",
                  "\t(select [Domain],[IndicatorId],[Indicator],[BucketId],[Bucket],",
                  "\tcast([BucketOrder]as int)as [BucketOrder],",
                  "\tcast([IndicatorOrder]as int)as[IndicatorOrder],",
                  "\tcast([DomainOrder]as int)as [DomainOrder],",
                  "\t[Description],[Timeframe],[Green],[Yellow],[Red]",
                  "\tfrom [ipg_weekly_package_vectors]",
                  "\twhere [Visible] = 1  ",
                  "\t) as indicator",
                  "on 1=1</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "pas_ontime",
            "expression": [
              "0+",
              "CALCULATE([pas_total],",
              "FILTER(main,main[is_late]= 0)",
              ")"
            ]
          },
          {
            "name": "pas_late",
            "expression": [
              "0+",
              "CALCULATE([pas_total],",
              "FILTER(main,main[is_late]= 1)",
              ")",
              ""
            ]
          },
          {
            "name": "pas_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(main,main[pas_filter]= 1)",
              ")",
              ""
            ]
          },
          {
            "name": "pas_RATE",
            "expression": [
              "",
              "IF(NOT([pas_total]>0),BLANK(),",
              "ROUND(DIVIDE([pas_ontime],[pas_total],BLANK()),4)",
              ")"
            ]
          },
          {
            "name": "pas_VALUE",
            "expression": [
              "",
              "IF(NOT([pas_total]>0),BLANK(),",
              "FORMAT( [pas_RATE],\"0.00%\") & \" (\" &[pas_ontime] & \"/\" & [pas_total]& \")\"",
              ")"
            ]
          },
          {
            "name": "pas_COLOR",
            "expression": [
              "",
              "IF(NOT([pas_total]>0),3,",
              "IF([pas_RATE]<0.85, 1,",
              "IF([pas_RATE]<0.95, 2,",
              "3",
              ")))"
            ]
          },
          {
            "name": "redrop_hotfix",
            "expression": [
              "0+",
              "CALCULATE([redrop_total],",
              "FILTER(main,main[is_hotfix]= 1)",
              ")"
            ]
          },
          {
            "name": "redrop_nothotfix",
            "expression": [
              "0+",
              "CALCULATE([redrop_total],",
              "FILTER(main,main[is_hotfix]= 0)",
              ")"
            ]
          },
          {
            "name": "redrop_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(main,main[redrop_filter]= 1)",
              ")"
            ]
          },
          {
            "name": "redrop_RATE",
            "expression": [
              "",
              "IF(NOT([redrop_total]>0),BLANK(),",
              "ROUND(DIVIDE([redrop_hotfix],[redrop_total],BLANK()),4)",
              ")"
            ]
          },
          {
            "name": "redrop_VALUE",
            "expression": [
              "",
              "IF(NOT([redrop_total]>0),BLANK(),",
              "FORMAT( [redrop_RATE],\"0.00%\") & \" (\" &[redrop_hotfix] & \"/\" & [redrop_total]& \")\"",
              ")"
            ]
          },
          {
            "name": "redrop_COLOR",
            "expression": [
              "",
              "IF(NOT([redrop_total]>0),3,",
              "IF([redrop_RATE]>=0.02, 1,",
              "3",
              "))"
            ]
          },
          {
            "name": "stale_drop_VALUE",
            "expression": [
              "",
              "IF([stale_drop_count]>0, FORMAT([stale_drop_count],\"General Number\"))"
            ],
            "formatString": "0"
          },
          {
            "name": "stale_drop_COLOR",
            "expression": [
              "",
              "IF([stale_drop_count]>0, 1,",
              "3",
              ")"
            ]
          },
          {
            "name": "past_por_current",
            "expression": [
              "0+",
              "CALCULATE([past_por_total],",
              "FILTER(main,main[por_in_future]=0)",
              ")"
            ]
          },
          {
            "name": "past_por_future",
            "expression": [
              "0+",
              "CALCULATE([past_por_total],",
              "FILTER(main,main[por_in_future]=1)",
              ")"
            ]
          },
          {
            "name": "past_por_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(main,main[past_por_filter]= 1)",
              ")"
            ]
          },
          {
            "name": "past_por_VALUE",
            "expression": [
              "",
              "IF(NOT([past_por_total]>0),BLANK(),",
              "[past_por_current]&\"/\" &[past_por_future]",
              ")"
            ]
          },
          {
            "name": "past_por_COLOR",
            "expression": [
              "",
              "IF([past_por_total]>0, 1,",
              "3",
              ")",
              ""
            ]
          },
          {
            "name": "VALUE",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[IndicatorId_int]))=1,",
              "SWITCH(VALUES(Main[IndicatorId_int]),",
              "13,[pas_VALUE],",
              "5,[redrop_VALUE],",
              "14,[past_por_VALUE],",
              "11,[stale_drop_VALUE],",
              "15,[sub_ip_VALUE],",
              "7,[showstopper_bugs_VALUE],",
              "3,[postsi_bugs_VALUE],",
              "4,[presi_found_by_soc_bugs_VALUE],",
              "8,[tfm_VALUE],",
              "6,[features_VALUE],",
              "19,[pearl_VALUE],",
              "18,[response_sla_VALUE],",
              "17,[resolution_sla_VALUE],",
              "12,[effective_buffer_VALUE],",
              "9,[coverage_VALUE],",
              "21,[regression_VALUE],",
              "22,[testplan_VALUE],",
              "20,[doc_VALUE],",
              "16,[ml_aip_VALUE],",
              "23,[LQ_VALUE]",
              ")",
              ")"
            ]
          },
          {
            "name": "COLOR",
            "expression": [
              "IF(COUNTROWS(VALUES(Main[IndicatorId_int]))=1,",
              "SWITCH(VALUES(Main[IndicatorId_int]),",
              "13,[pas_COLOR],",
              "5,[redrop_COLOR],",
              "14,[past_por_COLOR],",
              "11,[stale_drop_COLOR],",
              "15,[sub_ip_COLOR],",
              "7,[showstopper_bugs_COLOR],",
              "3,[postsi_bugs_COLOR],",
              "4,[presi_found_by_soc_bugs_COLOR],",
              "8,[tfm_COLOR],",
              "6,[features_COLOR],",
              "19,[pearl_measure_COLOR],",
              "18,[response_sla_COLOR],",
              "17,[resolution_sla_COLOR],",
              "12,[effective_buffer_COLOR],",
              "9,[coverage_COLOR],",
              "21,[regression_COLOR],",
              "22,[testplan_COLOR],",
              "20,[doc_COLOR],",
              "16,[ml_aip_COLOR],",
              "23,[LQ_COLOR]",
              ")",
              ")"
            ]
          },
          {
            "name": "drill_link",
            "expression": [
              "",
              "SUBSTITUTE(",
              "SWITCH(VALUES(Main[IndicatorId_int]),",
              "16,[drill_link_ml_aip],",
              "23,\"https://sdg74-web.sc.intel.com/lq_dashboard/release_cth/lq_overview.cgi\",",
              "[drill_link_rest]",
              ")",
              ",\"+\",\"%2B\")",
              "",
              ""
            ]
          },
          {
            "name": "description_measure",
            "expression": "IF(COUNTROWS(VALUES(main[IndicatorId]))>1,\"To see definitions and color coding select the indicator in question\",max(main[Description_with_timeframe]))"
          },
          {
            "name": "red_measure",
            "expression": "IF(COUNTROWS(VALUES(main[IndicatorId]))>1,BLANK(),max(main[Red]))"
          },
          {
            "name": "yellow_measure",
            "expression": "IF(COUNTROWS(VALUES(main[IndicatorId]))>1,BLANK(),max(main[Yellow]))"
          },
          {
            "name": "green_measure",
            "expression": "IF(COUNTROWS(VALUES(main[IndicatorId]))>1,BLANK(),max(main[Green]))"
          },
          {
            "name": "timeframe_measure",
            "expression": "IF(COUNTROWS(VALUES(main[IndicatorId]))>1,BLANK(),\"Timeframe: \"&max(main[Timeframe]))"
          },
          {
            "name": "colorcoding_measure",
            "expression": "IF(COUNTROWS(VALUES(main[IndicatorId]))>1,BLANK(),\"Color coding:\")"
          },
          {
            "name": "stale_drop_count",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(main,main[stale_drop_filter]= 1),",
              "FILTER(main,main[is_stale]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "sub_ip_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(subip_milestone_data[MilestoneId]),[MaxDummy]),",
              "FILTER(all(subip_milestone_data[sub_ip_filter]),subip_milestone_data[sub_ip_filter]= 1)",
              ")"
            ]
          },
          {
            "name": "sub_ip_late",
            "expression": [
              "0+",
              "CALCULATE([sub_ip_total],",
              "FILTER(all(subip_milestone_data[subip_is_late]),subip_milestone_data[subip_is_late]= 1)",
              ")",
              ""
            ]
          },
          {
            "name": "sub_ip_trending_late",
            "expression": [
              "0+",
              "CALCULATE([sub_ip_total],",
              "FILTER(all(subip_milestone_data[subip_is_trending_late]),subip_milestone_data[subip_is_trending_late]= 1)",
              ")",
              ""
            ]
          },
          {
            "name": "sub_ip_hotfix",
            "expression": [
              "0+",
              "CALCULATE([sub_ip_total],",
              "FILTER(all(subip_milestone_data[subip_is_hotfix]),subip_milestone_data[subip_is_hotfix]= 1)",
              ")"
            ]
          },
          {
            "name": "sub_ip_VALUE",
            "expression": [
              "",
              "IF(NOT([sub_ip_total]>0),BLANK(),",
              "[sub_ip_late]&\"/\" &[sub_ip_trending_late]&\"/\" &[sub_ip_hotfix]",
              ")"
            ]
          },
          {
            "name": "sub_ip_COLOR",
            "expression": [
              "",
              "IF([sub_ip_total]>0, 1,",
              "3",
              ")",
              ""
            ]
          },
          {
            "name": "tfm_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(ipg_tfm[Id]),[MaxDummy]),",
              "FILTER(all(ipg_tfm[is_showstopper_high_medium]),ipg_tfm[is_showstopper_high_medium]= 1)",
              ")"
            ]
          },
          {
            "name": "tfm_showstopper",
            "expression": [
              "0+",
              "CALCULATE([tfm_total],",
              "FILTER(all(ipg_tfm[is_showstopper]),ipg_tfm[is_showstopper]= \"1\")",
              ")"
            ]
          },
          {
            "name": "tfm_high",
            "expression": [
              "0+",
              "CALCULATE([tfm_total],",
              "FILTER(all(ipg_tfm[is_high]),ipg_tfm[is_high]= \"1\")",
              ")"
            ]
          },
          {
            "name": "tfm_VALUE",
            "expression": [
              "",
              "IF(NOT([tfm_total]>0),BLANK(),",
              "[tfm_showstopper]&\"/\" &[tfm_high]&\"/\" &[tfm_medium]",
              "",
              ")"
            ]
          },
          {
            "name": "tfm_COLOR",
            "expression": [
              "",
              "IF([tfm_showstopper]>0, 1,",
              "IF([tfm_high]>0 || [tfm_medium]>0, 2,",
              "3",
              "))",
              ""
            ]
          },
          {
            "name": "showstopper_bugs_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(ipg_bug[id]),[MaxDummy]),",
              "FILTER(all(ipg_bug[showstopper_filter]),ipg_bug[showstopper_filter]= 1)",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "showstopper_bugs_active",
            "expression": [
              "0+",
              "CALCULATE([showstopper_bugs_total],",
              "FILTER(all(ipg_bug[is_active_bug]),ipg_bug[is_active_bug]= \"1\")",
              ")"
            ]
          },
          {
            "name": "showstopper_bugs_VALUE",
            "expression": [
              "",
              "IF(NOT([showstopper_bugs_total]>0),BLANK(),",
              "[showstopper_bugs_new]&\"/\"&[showstopper_bugs_active]&\"/\" &[showstopper_bugs_total]",
              ")",
              ""
            ]
          },
          {
            "name": "showstopper_bugs_new",
            "expression": [
              "0+",
              "CALCULATE([showstopper_bugs_total],",
              "FILTER(all(ipg_bug[is_new]),ipg_bug[is_new]= \"1\")",
              ")"
            ]
          },
          {
            "name": "showstopper_bugs_COLOR",
            "expression": [
              "",
              "IF([showstopper_bugs_new]>0, 1,",
              "3",
              ")",
              ""
            ]
          },
          {
            "name": "postsi_bugs_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(ipg_bug[id]),[MaxDummy]),",
              "FILTER(all(ipg_bug[postsi_filter]),ipg_bug[postsi_filter]=1)",
              ")"
            ]
          },
          {
            "name": "postsi_bugs_active",
            "expression": [
              "0+",
              "CALCULATE([postsi_bugs_total],",
              "FILTER(all(ipg_bug[is_active_bug]),ipg_bug[is_active_bug]= \"1\")",
              ")"
            ]
          },
          {
            "name": "postsi_bugs_new",
            "expression": [
              "0+",
              "CALCULATE([postsi_bugs_total],",
              "FILTER(all(ipg_bug[is_new]),ipg_bug[is_new]= \"1\")",
              ")"
            ]
          },
          {
            "name": "postsi_bugs_VALUE",
            "expression": [
              "",
              "IF(NOT([postsi_bugs_total]>0),BLANK(),",
              "[postsi_bugs_new]&\"/\"&[postsi_bugs_active]&\"/\" &[postsi_bugs_total]",
              ")"
            ]
          },
          {
            "name": "postsi_bugs_COLOR",
            "expression": [
              "",
              "IF([postsi_bugs_new]>0, 1,",
              "3",
              ")"
            ]
          },
          {
            "name": "presi_found_by_soc_bugs_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(ipg_bug[id]),[MaxDummy]),",
              "FILTER(all(ipg_bug[presi_filter]),ipg_bug[presi_filter]=1)",
              ")"
            ]
          },
          {
            "name": "presi_found_by_soc_bugs_new",
            "expression": [
              "0+",
              "CALCULATE([presi_found_by_soc_bugs_total],",
              "FILTER(ipg_bug,ipg_bug[is_new]=\"1\" )",
              ")"
            ]
          },
          {
            "name": "presi_found_by_soc_bugs_showstopper",
            "expression": [
              "0+",
              "CALCULATE([presi_found_by_soc_bugs_total],",
              "FILTER(ipg_bug,ipg_bug[priority]=\"1-showstopper\" && ipg_bug[is_active_bug]= \"1\")",
              ")"
            ]
          },
          {
            "name": "presi_found_by_soc_bugs_VALUE",
            "expression": [
              "",
              "IF(NOT([presi_found_by_soc_bugs_total]>0),BLANK(),",
              "[presi_found_by_soc_bugs_showstopper]&\"/\"&[presi_found_by_soc_bugs_new]",
              ")"
            ]
          },
          {
            "name": "presi_found_by_soc_bugs_COLOR",
            "expression": [
              "",
              "IF([presi_found_by_soc_bugs_total]>0, 1,",
              "3",
              ")"
            ]
          },
          {
            "name": "features_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(ipg_feature[id]),[MaxDummy]),",
              "FILTER(all(ipg_feature[Is_Active_Or_Complete]),ipg_feature[Is_Active_Or_Complete]=\"1\")",
              ")"
            ]
          },
          {
            "name": "features_active",
            "expression": [
              "0+",
              "CALCULATE([features_total],",
              "FILTER(all(ipg_feature[Is_Active]),ipg_feature[Is_Active]=\"1\")",
              ")"
            ]
          },
          {
            "name": "features_VALUE",
            "expression": [
              "",
              "IF(NOT([features_total]>0),BLANK(),",
              "[features_new]&\"/\"&[features_active]&\"/\"&[features_total]",
              ")"
            ]
          },
          {
            "name": "features_new",
            "expression": [
              "0+",
              "CALCULATE([features_total],",
              "FILTER(all(ipg_feature[Is_New]),ipg_feature[Is_New]=\"1\")",
              ")"
            ]
          },
          {
            "name": "features_COLOR",
            "expression": [
              "",
              "IF([features_new]>0, 2,",
              "3",
              ")"
            ]
          },
          {
            "name": "pearl_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(pearl_data[milestoneID, checklistID]),[MaxDummy]),",
              "FILTER(all(main[pearl_filter]),main[pearl_filter]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "pearl_green",
            "expression": [
              "0+",
              "CALCULATE([pearl_total],",
              "FILTER(all(pearl_data[pearl_color]),pearl_data[pearl_color]=\"green\")",
              ")",
              ""
            ]
          },
          {
            "name": "pearl_yellow",
            "expression": [
              "0+",
              "CALCULATE([pearl_total],",
              "FILTER(all(pearl_data[pearl_color]),pearl_data[pearl_color]=\"yellow\")",
              ")",
              ""
            ]
          },
          {
            "name": "pearl_red",
            "expression": [
              "0+",
              "CALCULATE([pearl_total],",
              "FILTER(all(pearl_data[pearl_color]),pearl_data[pearl_color]=\"red\")",
              ")"
            ]
          },
          {
            "name": "pearl_na",
            "expression": [
              "0+",
              "CALCULATE([pearl_total],",
              "FILTER(all(pearl_data[pearl_color]),pearl_data[pearl_color]=\"grey\")",
              ")"
            ]
          },
          {
            "name": "pearl_%",
            "expression": [
              "0+",
              "CALCULATE(ROUND(AVERAGE(pearl_data[pearl_grade]), 2),",
              "FILTER(all(main[pearl_filter]),main[pearl_filter]=1),",
              "FILTER(all(pearl_data[pearl_color]),pearl_data[pearl_color]in{\"green\",\"yellow\",\"red\"})",
              ")",
              ""
            ]
          },
          {
            "name": "pearl_VALUE",
            "expression": [
              "",
              "IF(NOT([pearl_total]>0),BLANK(),",
              "[pearl_%]&\"% (\"&[pearl_green]&\"/\"&[pearl_yellow]&\"/\"&[pearl_red]&\"/\"&[pearl_na]&\")\"",
              ")"
            ]
          },
          {
            "name": "pearl_measure_COLOR",
            "expression": [
              "",
              "IF([pearl_na]>0 || [pearl_red]>0, 1,",
              "IF([pearl_yellow]>0, 2,",
              "3",
              "))"
            ]
          },
          {
            "name": "response_sla_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(ipg_bug[id]),[MaxDummy]),",
              "FILTER(all(ipg_bug[response_filter]),ipg_bug[response_filter]=1)",
              ")"
            ]
          },
          {
            "name": "response_sla_met",
            "expression": [
              "0+",
              "CALCULATE([response_sla_total],",
              "FILTER(all(ipg_bug[is_response_met]),ipg_bug[is_response_met]=\"1\")",
              ")"
            ]
          },
          {
            "name": "response_sla_%",
            "expression": [
              "",
              "IF(NOT([response_sla_total]>0),BLANK(),",
              "ROUND(DIVIDE([response_sla_met],[response_sla_total]),4)",
              ")"
            ]
          },
          {
            "name": "response_sla_VALUE",
            "expression": [
              "",
              "IF(NOT([response_sla_total]>0),BLANK(),",
              "FORMAT( [response_sla_%],\"0.00%\")",
              ")"
            ]
          },
          {
            "name": "response_sla_COLOR",
            "expression": [
              "",
              "IF(NOT([response_sla_total]>0),3,",
              "IF([response_sla_%]<0.80, 1,",
              "IF([response_sla_%]<0.95, 2,",
              "3",
              ")))"
            ]
          },
          {
            "name": "resolution_sla_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(ipg_bug[id]),[MaxDummy]),",
              "FILTER(all(ipg_bug[resolution_filter]),ipg_bug[resolution_filter]=1)",
              ")"
            ]
          },
          {
            "name": "resolution_sla_met",
            "expression": [
              "0+",
              "CALCULATE([resolution_sla_total],",
              "FILTER(all(ipg_bug[is_resolution_met]),ipg_bug[is_resolution_met]=\"1\")",
              ")"
            ]
          },
          {
            "name": "resolution_sla_%",
            "expression": [
              "",
              "IF(NOT([resolution_sla_total]>0),BLANK(),",
              "ROUND(DIVIDE([resolution_sla_met],[resolution_sla_total]),4)",
              ")"
            ]
          },
          {
            "name": "resolution_sla_VALUE",
            "expression": [
              "",
              "IF(NOT([resolution_sla_total]>0),BLANK(),",
              "FORMAT( [resolution_sla_%],\"0.00%\")",
              ")"
            ]
          },
          {
            "name": "resolution_sla_COLOR",
            "expression": [
              "",
              "IF(NOT([resolution_sla_total]>0),3,",
              "IF([resolution_sla_%]<0.8, 1,",
              "IF([resolution_sla_%]<0.95, 2,",
              "3",
              ")))"
            ]
          },
          {
            "name": "tfm_medium",
            "expression": [
              "0+",
              "CALCULATE([tfm_total],",
              "FILTER(all(ipg_tfm[is_medium]),ipg_tfm[is_medium]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "effective_buffer_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[MilestoneId]),[MaxDummy]),",
              "FILTER(main,main[effective_buffer_filter]= 1)",
              ")"
            ]
          },
          {
            "name": "effective_buffer_green",
            "expression": [
              "0+",
              "CALCULATE([effective_buffer_total],",
              "FILTER(main,main[effective_buffer_classification]= \"green\")",
              ")",
              ""
            ]
          },
          {
            "name": "effective_buffer_yellow",
            "expression": [
              "0+",
              "CALCULATE([effective_buffer_total],",
              "FILTER(main,main[effective_buffer_classification]= \"yellow\")",
              ")",
              ""
            ]
          },
          {
            "name": "effective_buffer_red",
            "expression": [
              "0+",
              "CALCULATE([effective_buffer_total],",
              "FILTER(main,main[effective_buffer_classification]= \"red\")",
              ")",
              ""
            ]
          },
          {
            "name": "effective_buffer_VALUE",
            "expression": [
              "",
              "IF(NOT([effective_buffer_total]>0),BLANK(),",
              "[effective_buffer_green]&\"/\" &[effective_buffer_yellow]&\"/\" &[effective_buffer_red]",
              ")"
            ]
          },
          {
            "name": "effective_buffer_COLOR",
            "expression": [
              "",
              "IF([effective_buffer_red]>0, 1,",
              "IF([effective_buffer_yellow]>0, 2,",
              "3",
              "))",
              ""
            ]
          },
          {
            "name": "high_level_VALUE",
            "expression": [
              "",
              "IF([high_level_COLOR]>0,MAX(main[Bucket]))",
              ""
            ]
          },
          {
            "name": "high_level_COLOR",
            "expression": [
              "",
              "IF(COUNTROWS(VALUES(Main[BucketId_int]))=1,",
              "SWITCH(MAX(main[BucketId_int]),",
              "1,MINX({[postsi_bugs_COLOR],[showstopper_bugs_COLOR],[presi_found_by_soc_bugs_COLOR]},[Value]),",
              "3,MINX({[past_por_COLOR],[effective_buffer_COLOR_high_level]},[Value]),",
              "4,[pas_COLOR],",
              "5,[pearl_measure_COLOR],",
              "7,[redrop_COLOR],",
              "8,MINX({[response_sla_COLOR],[resolution_sla_COLOR]},[Value]),",
              "9,[stale_drop_COLOR],",
              "10,[sub_ip_COLOR],",
              "11,[tfm_COLOR],",
              "12,[doc_COLOR],",
              "13,MINX({[coverage_COLOR],[regression_COLOR],[testplan_COLOR]},[Value]),",
              "14,[ml_aip_COLOR]",
              "))"
            ]
          },
          {
            "name": "high_level_description_measure",
            "expression": [
              "",
              "IF(COUNTROWS(VALUES(main[BucketId]))>1,",
              "\"To see which indicators are related to each bucket select the bucket. To drill through - right click then drill through.\",",
              "\"Related indicators:\"&UNICHAR(10) & CONCATENATEX(VALUES(main[Indicator]),\"  •  \"&[Indicator],UNICHAR(10),[Indicator],ASC))"
            ]
          },
          {
            "name": "doc_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(main,main[doc_filter]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "doc_available",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(main[IpConfigurationId]),",
              "FILTER(main,main[doc_filter]=1),",
              "FILTER(main,main[is_missing_doc]=0 && NOT(ISBLANK(main[is_missing_doc])))",
              ")",
              ""
            ]
          },
          {
            "name": "doc_VALUE",
            "expression": [
              "",
              "IF(NOT([doc_total]>0),BLANK(),",
              "[doc_available]&\"/\"&[doc_total]",
              ")",
              ""
            ]
          },
          {
            "name": "doc_COLOR",
            "expression": [
              "",
              "IF(NOT([doc_total]>0),3,",
              "IF([doc_available]<[doc_total],1,",
              "3",
              "))",
              ""
            ]
          },
          {
            "name": "effective_buffer_COLOR_high_level",
            "expression": [
              "",
              "IF([effective_buffer_red]>0, 2,",
              "IF([effective_buffer_yellow]>0, 2,",
              "3",
              "))",
              ""
            ]
          },
          {
            "name": "regression_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(main,main[val_metrics_filter]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "regression_green",
            "expression": [
              "0+",
              "CALCULATE([regression_total],",
              "FILTER(ipg_regression,ipg_regression[color_category]=\"0\")",
              ")",
              ""
            ]
          },
          {
            "name": "regression_yellow",
            "expression": [
              "0+",
              "CALCULATE([regression_total],",
              "FILTER(ipg_regression,ipg_regression[color_category]=\"1\")",
              ")",
              ""
            ]
          },
          {
            "name": "regression_red",
            "expression": [
              "0+",
              "CALCULATE([regression_total],",
              "FILTER(ipg_regression,ipg_regression[color_category]=\"2\")",
              ")",
              ""
            ]
          },
          {
            "name": "regression_tbd",
            "expression": [
              "0+",
              "[regression_total] - ",
              "CALCULATE([regression_total],",
              "FILTER(ipg_regression,ipg_regression[color_category]in {\"0\",\"1\",\"2\"})",
              ")",
              ""
            ]
          },
          {
            "name": "coverage_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(main,main[val_metrics_filter]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "regression_VALUE",
            "expression": [
              "",
              "IF(NOT([regression_total]>0),BLANK(),",
              "[regression_green]&\"/\"&[regression_yellow]&\"/\"&[regression_red]&\"/\"&[regression_tbd]",
              ")",
              ""
            ]
          },
          {
            "name": "regression_COLOR",
            "expression": [
              "",
              "IF([regression_tbd]>0 || [regression_red]>0, 1,",
              "IF([regression_yellow]>0, 2,",
              "3",
              "))",
              ""
            ]
          },
          {
            "name": "coverage_green",
            "expression": [
              "0+",
              "CALCULATE([coverage_total],",
              "FILTER(ipg_coverage,ipg_coverage[color_category]=\"0\")",
              ")",
              ""
            ]
          },
          {
            "name": "coverage_yellow",
            "expression": [
              "0+",
              "CALCULATE([coverage_total],",
              "FILTER(ipg_coverage,ipg_coverage[color_category]=\"1\")",
              ")",
              ""
            ]
          },
          {
            "name": "coverage_red",
            "expression": [
              "0+",
              "CALCULATE([coverage_total],",
              "FILTER(ipg_coverage,ipg_coverage[color_category]=\"2\")",
              ")",
              ""
            ]
          },
          {
            "name": "coverage_tbd",
            "expression": [
              "0+",
              "[coverage_total] - ",
              "CALCULATE([coverage_total],",
              "FILTER(ipg_coverage,ipg_coverage[color_category]in {\"0\",\"1\",\"2\"})",
              ")",
              ""
            ]
          },
          {
            "name": "coverage_VALUE",
            "expression": [
              "",
              "IF(NOT([coverage_total]>0),BLANK(),",
              "[coverage_green]&\"/\"&[coverage_yellow]&\"/\"&[coverage_red]&\"/\"&[coverage_tbd]",
              ")"
            ]
          },
          {
            "name": "testplan_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(main[IpConfigurationId]),[MaxDummy]),",
              "FILTER(main,main[val_metrics_filter]=1)",
              ")"
            ]
          },
          {
            "name": "coverage_COLOR",
            "expression": [
              "",
              "IF([coverage_tbd]>0 || [coverage_red]>0, 1,",
              "IF([coverage_yellow]>0, 2,",
              "3",
              "))"
            ]
          },
          {
            "name": "testplan_green",
            "expression": [
              "0+",
              "CALCULATE([testplan_total],",
              "FILTER(ipg_testplan,ipg_testplan[color_category]=\"0\")",
              ")"
            ]
          },
          {
            "name": "testplan_yellow",
            "expression": [
              "0+",
              "CALCULATE([testplan_total],",
              "FILTER(ipg_testplan,ipg_testplan[color_category]=\"1\")",
              ")"
            ]
          },
          {
            "name": "testplan_red",
            "expression": [
              "0+",
              "CALCULATE([testplan_total],",
              "FILTER(ipg_testplan,ipg_testplan[color_category]=\"2\")",
              ")"
            ]
          },
          {
            "name": "testplan_tbd",
            "expression": [
              "0+",
              "[testplan_total] - ",
              "CALCULATE([testplan_total],",
              "FILTER(ipg_testplan,ipg_testplan[color_category]in {\"0\",\"1\",\"2\"})",
              ")"
            ]
          },
          {
            "name": "testplan_VALUE",
            "expression": [
              "",
              "IF(NOT([testplan_total]>0),BLANK(),",
              "[testplan_green]&\"/\"&[testplan_yellow]&\"/\"&[testplan_red]&\"/\"&[testplan_tbd]",
              ")"
            ]
          },
          {
            "name": "testplan_COLOR",
            "expression": [
              "",
              "IF([testplan_tbd]>0 || [testplan_red]>0, 1,",
              "IF([testplan_yellow]>0, 2,",
              "3",
              "))"
            ]
          },
          {
            "name": "testplan_number_target",
            "expression": [
              "",
              "IF(ISBLANK(MAX(ipg_testplan[color_category])),",
              "\"Missing\",",
              "MAX(ipg_testplan[number_target])",
              ")"
            ]
          },
          {
            "name": "testplan_number_target_color",
            "expression": [
              "",
              "SWITCH(MAX(ipg_testplan[color_category]),",
              "\"0\",0,",
              "\"1\",1,",
              "\"2\",2,",
              "2",
              ")"
            ]
          },
          {
            "name": "coverage_number_target",
            "expression": [
              "",
              "IF(ISBLANK(MAX(ipg_coverage[color_category])),",
              "\"Missing\",",
              "MAX(ipg_coverage[number_target])",
              ")",
              ""
            ]
          },
          {
            "name": "coverage_number_target_color",
            "expression": [
              "",
              "SWITCH(MAX(ipg_coverage[color_category]),",
              "\"0\",0,",
              "\"1\",1,",
              "\"2\",2,",
              "2",
              ")"
            ]
          },
          {
            "name": "regression_number_target",
            "expression": [
              "",
              "CALCULATE(",
              "IF(ISBLANK(MAX(ipg_regression[color_category])),",
              "\"Missing\",",
              "MAX(ipg_regression[number_target])",
              ")",
              ",",
              "FILTER(main,main[val_metrics_filter]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "regression_number_target_color",
            "expression": [
              "",
              "SWITCH(MAX(ipg_regression[color_category]),",
              "\"0\",0,",
              "\"1\",1,",
              "\"2\",2,",
              "2",
              ")"
            ]
          },
          {
            "name": "MaxDummy",
            "expression": "MAX(main[dummy_filter])"
          },
          {
            "name": "ml_aip_total",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(ml_aip_data[f_milestone_id]),[MaxDummy]),",
              "FILTER(main,main[incomplete_drop_in_next_8_weeks]=1)",
              ")"
            ]
          },
          {
            "name": "ml_aip_red",
            "expression": [
              "0+",
              "CALCULATE([ml_aip_total],",
              "FILTER(ml_aip_data,ml_aip_data[Risk Severity int]=\"2\")",
              ")",
              ""
            ]
          },
          {
            "name": "ml_aip_yellow",
            "expression": [
              "0+",
              "CALCULATE([ml_aip_total],",
              "FILTER(ml_aip_data,ml_aip_data[Risk Severity int]=\"1\")",
              ")",
              ""
            ]
          },
          {
            "name": "ml_aip_green",
            "expression": [
              "0+",
              "CALCULATE([ml_aip_total],",
              "FILTER(ml_aip_data,ml_aip_data[Risk Severity int]=\"0\")",
              ")",
              ""
            ]
          },
          {
            "name": "ml_aip_VALUE",
            "expression": [
              "",
              "IF(NOT([ml_aip_total]>0),BLANK(),",
              "[ml_aip_green]&\"/\"&[ml_aip_yellow]&\"/\"&[ml_aip_red]",
              ")",
              ""
            ]
          },
          {
            "name": "ml_aip_COLOR",
            "expression": [
              "",
              "IF([ml_aip_red]>0, 2,",
              "IF([ml_aip_yellow]>0, 2,",
              "IF([ml_aip_green]>0, 3,",
              "3",
              ")))",
              ""
            ]
          },
          {
            "name": "drill_link_rest",
            "expression": [
              "IF(COUNTROWS(VALUES(main[IndicatorId]))>1,BLANK(),max(main[drill_url])",
              "&",
              "\"?filter=main/dummy_filter eq 1\"",
              "&",
              "IF(ISFILTERED(release_central_family[SubOrg]), \" and release_central_family/SubOrg in (\"&CONCATENATEX(VALUES(release_central_family[SubOrg]),\"'\"&[SubOrg]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(release_central_family[IPSupplier]), \" and release_central_family/IPSupplier in (\"&CONCATENATEX(VALUES(release_central_family[IPSupplier]),\"'\"&[IPSupplier]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(release_central_family[IPFamily]), \" and release_central_family/IPFamily in (\"&CONCATENATEX(VALUES(release_central_family[IPFamily]),\"'\"&[IPFamily]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(release_central_family[Program_Manager_Name]), \" and release_central_family/Program_Manager_Name in (\"&CONCATENATEX(VALUES(release_central_family[Program_Manager_Name]),\"'\"&[Program_Manager_Name]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(main[Configuration]), \" and main/Configuration in (\"&CONCATENATEX(VALUES(main[Configuration]),\"'\"&[Configuration]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(main[IpType]), \" and main/IpType in (\"&CONCATENATEX(VALUES(main[IpType]),\"'\"&[IpType]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(main[ip_schedule_contact]), \" and main/ip_schedule_contact in (\"&CONCATENATEX(VALUES(main[ip_schedule_contact]),\"'\"&[ip_schedule_contact]&\"'\", \",\")&\")\")",
              "",
              ")",
              "",
              "",
              ""
            ]
          },
          {
            "name": "drill_link_ml_aip",
            "expression": [
              "IF(COUNTROWS(VALUES(main[IndicatorId]))>1,BLANK(),max(main[drill_url])",
              "&",
              "\"?filter=main/dummy_filter eq 1 and ip_milestone_data/weekly_package_filter gt 0\"",
              "&",
              "IF(ISFILTERED(release_central_family[SubOrg]), \" and release_central_family/SubOrg in (\"&CONCATENATEX(VALUES(release_central_family[SubOrg]),\"'\"&[SubOrg]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(release_central_family[IPSupplier]), \" and release_central_family/IPSupplier in (\"&CONCATENATEX(VALUES(release_central_family[IPSupplier]),\"'\"&[IPSupplier]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(release_central_family[IPFamily]), \" and release_central_family/IpFamily in (\"&CONCATENATEX(VALUES(release_central_family[IPFamily]),\"'\"&[IPFamily]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(release_central_family[Program_Manager_Name]), \" and release_central_family/Program_Manager_Name in (\"&CONCATENATEX(VALUES(release_central_family[Program_Manager_Name]),\"'\"&[Program_Manager_Name]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(main[Configuration]), \" and ip_milestone_data/Configuration in (\"&CONCATENATEX(VALUES(main[Configuration]),\"'\"&[Configuration]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(main[IpType]), \" and ip_milestone_data/IpType in (\"&CONCATENATEX(VALUES(main[IpType]),\"'\"&[IpType]&\"'\", \",\")&\")\")",
              "&",
              "IF(ISFILTERED(main[ip_schedule_contact]), \" and ip_milestone_data/ip_schedule_contact in (\"&CONCATENATEX(VALUES(main[ip_schedule_contact]),\"'\"&[ip_schedule_contact]&\"'\", \",\")&\")\")",
              "",
              ")",
              "",
              "",
              ""
            ]
          },
          {
            "name": "LQ_VALUE",
            "expression": "switch(max(main[LQDashLatestVal]), 7, \"missing\", 6, \"failing\", 5, \"waived\", 2, \"done\", 1, \"N/A\", \"No Data\")"
          },
          {
            "name": "LQ_COLOR",
            "expression": "switch(max(main[LQDashLatestVal]), 7,1, 6, 1, 5, 2, 2, 1, 1, 0, 0)+0"
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct ip.*,",
              "milestone.[IpConfigurationId, MilestoneId],",
              "milestone.[Drop],milestone.[DropType],milestone.[MilestoneId],milestone.[TrendYYYYWW],milestone.[TrendExactDate],milestone.[PorYYYYWW],milestone.[PorExactDate],milestone.[Trend OffSet],",
              "milestone.[Complete],milestone.[UsingProductsSummary],milestone.[UsingProducts],milestone.[Visible], milestone.[Revision],milestone.[TrendChangeReason],milestone.[TrendChangeDate] ,",
              "milestone.[is_execution_drop], milestone.[is_standard_drop], milestone.[is_hotfix],  milestone.[is_pcr_standard_tech], milestone.[is_complete], milestone.[is_stale],milestone.[is_late], milestone.[is_2_or_more_weeks_late],",
              "milestone.[por_in_future],milestone.[incomplete_drop_in_next_8_weeks],",
              "milestone.[effective_buffer],milestone.[effective_buffer_classification],",
              "retrospective.[Late Reason], retrospective.[Redrop Reason],retrospective.[Mitigation],retrospective.[Future Prevention],retrospective.[Impact],",
              "docs.[HAS],docs.[Integration Guide],",
              "contact.[ip_schedule_contact],",
              "case when docs.[HAS] is null then 1 else 0 end as [is missing HAS],",
              "case when docs.[Integration Guide] is null then 1 else 0 end as [is missing Integration Guide],",
              "case when  [is missing HAS] =1 or [is missing Integration Guide]=1 then 1 else 0 end as [is_missing_doc],",
              "indicator.[Domain],indicator.[DomainOrder],indicator.[BucketId],indicator.[Bucket],indicator.[BucketOrder],indicator.[IndicatorId],indicator.[Indicator],indicator.[IndicatorOrder],indicator.[Description],indicator.[Timeframe],indicator.[Green],indicator.[Yellow],indicator.[Red],",
              "",
              "-- pas",
              "case when indicator.[IndicatorId] = 13 and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate())) and",
              "milestone.[PorYYYYWW] is not null and milestone.[DropType] not like '%Hotfix%' and [DropType] not like '%Re-Drop%' and milestone.[Complete] = 'Yes' then 1 else 2 end as [pas_filter],",
              "-- redrop ",
              "case when indicator.[IndicatorId] = 5 and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate())) and",
              "milestone.[DropType] not like '%Early%' and milestone.[Complete] = 'Yes'  then 1 else 2 end as [redrop_filter],",
              "-- past_por ",
              "case when indicator.[IndicatorId] = 14 and   milestone.[Complete] = 'No' and milestone.[is_late] =1  then 1 else 2 end as [past_por_filter],",
              "-- stale_drops",
              "case when indicator.[IndicatorId] = 11  and milestone.[is_stale] =1  and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-8,getdate())) and datepart(ww,dateadd(week,-1,getdate()))",
              "then 1 else 2 end as [stale_drop_filter],",
              "-- sub_ip",
              "case when indicator.[IndicatorId] = 15  then 1 else 2 end as [sub_ip_filter],",
              "-- tfm",
              "case when indicator.[IndicatorId] = 8  then 1 else 2 end as [tfm_filter],",
              "-- pearl",
              "case when indicator.[IndicatorId] = 19  and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))",
              "then 1 else 2 end as [pearl_filter],",
              "-- pre_si_found_by_soc",
              "case when indicator.[IndicatorId] = 4  then 1 else 2 end as [pre_si_found_by_soc_filter],",
              "-- post_si",
              "case when indicator.[IndicatorId] = 3  then 1 else 2 end as [post_si_filter],",
              "-- features_active_total",
              "case when indicator.[IndicatorId] = 6  then 1 else 2 end as [features_active_total_filter],",
              "-- showstopper_bugs",
              "case when indicator.[IndicatorId] = 7  then 1 else 2 end as [showstopper_bugs_filter],",
              "-- response_sla",
              "case when indicator.[IndicatorId] = 18  then 1 else 2 end as [response_sla_filter],",
              "-- resolution_sla",
              "case when indicator.[IndicatorId] = 17  then 1 else 2 end as [resolution_sla_filter],",
              "-- effective_buffer ",
              "case when indicator.[IndicatorId] = 12 and milestone.[PorYYYYWW] between datepart(ww,dateadd(week,3,getdate())) and datepart(ww,dateadd(week,15,getdate())) and",
              "milestone.[TrendYYYYWW] >0  and  milestone.[DropType] not like '%Early%' and milestone.[Complete] = 'No'  then 1 else 2 end as [effective_buffer_filter],",
              "-- val_metrics ",
              "case when indicator.[IndicatorId] in (9,21,22) and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(month,6,getdate())) and",
              "[Complete] = 'No' then 1 else 2 end as [val_metrics_filter],",
              "-- doc",
              "case when indicator.[IndicatorId] =20 and [Complete] = 'No' and [DropType] like '%Standard%' and",
              "(milestone.[TrendYYYYWW]>= datepart(ww,dateadd(week,-26,getdate())) or milestone.[TrendYYYYWW]>= datepart(ww,dateadd(month,-26,getdate())) )then 1 else 2 end as [doc_filter]",
              "from",
              "\t(select [IpConfigurationId],[Name] as[Configuration],",
              "\t[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[IpFamily] as [old_IpFamily],[IpFamilyId],[IpGeneration],",
              "\t[AffectedProducts],[RequestingProducts],",
              "\t[IpType],[IsRequestable],[Lifecycle],[Node],[Process],[Reuse],[SupplierHsdTenant]as [HSDES_Tenant]",
              "\tfrom  [V_IPG_CARBON_IPCONFIGURATION]",
              "\twhere [Org] ='IPG' ",
              "\tand [Configuration] not like '%dummy%'",
              "\tand [Configuration] not like '%demo%'",
              "\t--and [IsRequestable] = 'yes'",
              "\t)ip",
              "left join ",
              "              (select  [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId],[IpConfigurationId],",
              "[Drop],[DropType],[MilestoneId],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffSet] as int) as [Trend OffSet],",
              "              [Complete],[UsingProductsSummary],[UsingProducts],[Visible], [Revision],[TrendChangeReason],",
              "              case when [TrendChangeDate] is not null and [TrendChangeDate]<>'' then cast([TrendChangeDate] as date) else null end as [TrendChangeDate] ,",
              "              case when ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')  then 1 else 2 end as [is_execution_drop],",
              "              case when [DropType] = 'Standard' then 1 else 0 end as [is_standard_drop],",
              "              case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is_hotfix], ",
              "              case when [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange') then 1 else 0  END as  [is_pcr_standard_tech],",
              "              case when [Complete] = 'Yes' then 1 else 0 end as [is_complete],",
              "              case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is_stale],",
              "              case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is_late],",
              "              case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is_2_or_more_weeks_late],",
              "              case when [PorYYYYWW] >= datepart(ww,getdate()) then 1 else 0 end as [por_in_future],",
              "              case when [TrendYYYYWW] between datepart(ww,getutcdate()) and  datepart(ww,dateadd(week, 8, getdate())) and [Complete] = 'No' then 1 else 0 end as [incomplete_drop_in_next_8_weeks],",
              "              case when [TrendYYYYWW] = datepart(ww,getutcdate()) then 1 else  datediff(week,getutcdate(),[TrendExactDate]) end *1.0 as [trend_minus_today_with_zero],",
              "\tcase when [trend_minus_today_with_zero] =0 or [trend_minus_today_with_zero] is null then 1 else [trend_minus_today_with_zero] end *1.0 as [trend_minus_today] ,",
              "              round(case when [PorYYYYWW] is null or [TrendYYYYWW] is null then null else cast([Trend OffSet]as double)/[trend_minus_today] end  * 100,0) as [effective_buffer],",
              "              CASE WHEN [effective_buffer] is null THEN null WHEN [effective_buffer]<=10 THEN 'red'WHEN [effective_buffer]<=20 THEN 'yellow' ELSE  'green'END as [effective_buffer_classification]",
              "              from [V_IPG_CARBON_milestone]",
              "              where [DevOrg] = 'IPG'",
              "              and [Visible] = 'Yes'",
              "              and ([complete] = 'No' or ([complete] = 'Yes' and [TrendYYYYWW] >= DATEPART(ww, dateadd(month,-2,GETDATE()))))  ",
              "              and ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')",
              "              ) as milestone",
              "on ip.[IpConfigurationId]= milestone.[IpConfigurationId]",
              "left join",
              "              (select  [MilestoneId],",
              "              max(case when [CommentType]  ='Late Reason' then [Summary] else null end )as [Late Reason],",
              "              max(case when [CommentType]  ='Redrop Reason' then [Summary] else null end )as [Redrop Reason],",
              "              max(case when [CommentType]  ='Mitigation' then [Summary] else null end )as [Mitigation],",
              "              max(case when [CommentType]  ='Future Prevention' then [Summary] else null end)as [Future Prevention],",
              "              max(case when [CommentType]  ='Impact' then [Summary] else null end )as [Impact]",
              "             from [V_IPG_CARBON_MILESTONE_COMMENT_SUMMARY_WITH_AREA] ",
              "              where [CommentType] in ( 'Late Reason','Redrop Reason','Mitigation','Future Prevention','Impact') ",
              "              and [Summary] is not null",
              "              group by [MilestoneId])retrospective",
              "on milestone.[MilestoneId] = retrospective.[MilestoneId] ",
              "left join",
              "\t(select distinct[IpConfigurationId],",
              "\tmax(case when [key]= 'HAS' then [value] end) as [HAS],",
              "\tmax(case when [key]in ('Integration Guide','Integration Guide XLS') then [value] end) as [Integration Guide]",
              "\tfrom[V_IPG_CARBON_IP_CONFIGURATION_ATTRIBUTE]",
              "\twhere[key] in ('HAS','Integration Guide','Integration Guide XLS' )",
              "\tgroup by [IpConfigurationId]) as docs",
              "on ip.[IpConfigurationId]=docs.[IpConfigurationId]",
              "left join",
              "\t(select distinct [IpConfigurationID], [Idsid] as [ip_schedule_contact]",
              "\tfrom [V_IPG_CARBON_CONTACTS]",
              "\twhere  [Caption]= 'IP Schedule Contact'",
              "\tand [IpConfigurationID] is not null",
              "\tand [Idsid]is not null) as contact",
              "on ip.[IpConfigurationId]=contact.[IpConfigurationId]",
              "left join",
              "\t(select [Domain],[IndicatorId],[Indicator],[BucketId],[Bucket],",
              "\tcast([BucketOrder]as int)as [BucketOrder],",
              "\tcast([IndicatorOrder]as int)as[IndicatorOrder],",
              "\tcast([DomainOrder]as int)as [DomainOrder],",
              "\t[Description],[Timeframe],[Green],[Yellow],[Red]",
              "\tfrom [ipg_weekly_package_vectors]",
              "\twhere [Visible] = 1  ",
              "\t) as indicator",
              "on 1=1"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "main"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ip.*,",
              "milestone.[IpConfigurationId, MilestoneId],",
              "milestone.[Drop],milestone.[DropType],milestone.[MilestoneId],milestone.[TrendYYYYWW],milestone.[TrendExactDate],milestone.[PorYYYYWW],milestone.[PorExactDate],milestone.[Trend OffSet],",
              "milestone.[Complete],milestone.[UsingProductsSummary],milestone.[UsingProducts],milestone.[Visible], milestone.[Revision],milestone.[TrendChangeReason],milestone.[TrendChangeDate] ,",
              "milestone.[is_execution_drop], milestone.[is_standard_drop], milestone.[is_hotfix],  milestone.[is_pcr_standard_tech], milestone.[is_complete], milestone.[is_stale],milestone.[is_late], milestone.[is_2_or_more_weeks_late],",
              "milestone.[por_in_future],milestone.[incomplete_drop_in_next_8_weeks],",
              "milestone.[effective_buffer],milestone.[effective_buffer_classification],",
              "retrospective.[Late Reason], retrospective.[Redrop Reason],retrospective.[Mitigation],retrospective.[Future Prevention],retrospective.[Impact],",
              "docs.[HAS],docs.[Integration Guide],",
              "contact.[ip_schedule_contact],",
              "case when docs.[HAS] is null then 1 else 0 end as [is missing HAS],",
              "case when docs.[Integration Guide] is null then 1 else 0 end as [is missing Integration Guide],",
              "case when  [is missing HAS] =1 or [is missing Integration Guide]=1 then 1 else 0 end as [is_missing_doc],",
              "indicator.[Domain],indicator.[DomainOrder],indicator.[BucketId],indicator.[Bucket],indicator.[BucketOrder],indicator.[IndicatorId],indicator.[Indicator],indicator.[IndicatorOrder],indicator.[Description],indicator.[Timeframe],indicator.[Green],indicator.[Yellow],indicator.[Red],",
              "",
              "-- pas",
              "case when indicator.[IndicatorId] = 13 and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate())) and",
              "milestone.[PorYYYYWW] is not null and milestone.[DropType] not like '%Hotfix%' and [DropType] not like '%Re-Drop%' and milestone.[Complete] = 'Yes' then 1 else 2 end as [pas_filter],",
              "-- redrop ",
              "case when indicator.[IndicatorId] = 5 and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate())) and",
              "milestone.[DropType] not like '%Early%' and milestone.[Complete] = 'Yes'  then 1 else 2 end as [redrop_filter],",
              "-- past_por ",
              "case when indicator.[IndicatorId] = 14 and   milestone.[Complete] = 'No' and milestone.[is_late] =1  then 1 else 2 end as [past_por_filter],",
              "-- stale_drops",
              "case when indicator.[IndicatorId] = 11  and milestone.[is_stale] =1  and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-8,getdate())) and datepart(ww,dateadd(week,-1,getdate()))",
              "then 1 else 2 end as [stale_drop_filter],",
              "-- sub_ip",
              "case when indicator.[IndicatorId] = 15  then 1 else 2 end as [sub_ip_filter],",
              "-- tfm",
              "case when indicator.[IndicatorId] = 8  then 1 else 2 end as [tfm_filter],",
              "-- pearl",
              "case when indicator.[IndicatorId] = 19  and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(week,-1,getdate()))",
              "then 1 else 2 end as [pearl_filter],",
              "-- pre_si_found_by_soc",
              "case when indicator.[IndicatorId] = 4  then 1 else 2 end as [pre_si_found_by_soc_filter],",
              "-- post_si",
              "case when indicator.[IndicatorId] = 3  then 1 else 2 end as [post_si_filter],",
              "-- features_active_total",
              "case when indicator.[IndicatorId] = 6  then 1 else 2 end as [features_active_total_filter],",
              "-- showstopper_bugs",
              "case when indicator.[IndicatorId] = 7  then 1 else 2 end as [showstopper_bugs_filter],",
              "-- response_sla",
              "case when indicator.[IndicatorId] = 18  then 1 else 2 end as [response_sla_filter],",
              "-- resolution_sla",
              "case when indicator.[IndicatorId] = 17  then 1 else 2 end as [resolution_sla_filter],",
              "-- effective_buffer ",
              "case when indicator.[IndicatorId] = 12 and milestone.[PorYYYYWW] between datepart(ww,dateadd(week,3,getdate())) and datepart(ww,dateadd(week,15,getdate())) and",
              "milestone.[TrendYYYYWW] >0  and  milestone.[DropType] not like '%Early%' and milestone.[Complete] = 'No'  then 1 else 2 end as [effective_buffer_filter],",
              "-- val_metrics ",
              "case when indicator.[IndicatorId] in (9,21,22) and milestone.[TrendYYYYWW] between datepart(ww,dateadd(week,-2,getdate())) and datepart(ww,dateadd(month,6,getdate())) and",
              "[Complete] = 'No' then 1 else 2 end as [val_metrics_filter],",
              "-- doc",
              "case when indicator.[IndicatorId] =20 and [Complete] = 'No' and [DropType] like '%Standard%' and",
              "(milestone.[TrendYYYYWW]>= datepart(ww,dateadd(week,-26,getdate())) or milestone.[TrendYYYYWW]>= datepart(ww,dateadd(month,-26,getdate())) )then 1 else 2 end as [doc_filter]",
              "from",
              "\t(select [IpConfigurationId],[Name] as[Configuration],",
              "\t[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[IpFamily] as [old_IpFamily],[IpFamilyId],[IpGeneration],",
              "\t[AffectedProducts],[RequestingProducts],",
              "\t[IpType],[IsRequestable],[Lifecycle],[Node],[Process],[Reuse],[SupplierHsdTenant]as [HSDES_Tenant]",
              "\tfrom  [V_IPG_CARBON_IPCONFIGURATION]",
              "\twhere [Org] ='IPG' ",
              "\tand [Configuration] not like '%dummy%'",
              "\tand [Configuration] not like '%demo%'",
              "\t--and [IsRequestable] = 'yes'",
              "\t)ip",
              "left join ",
              "              (select  [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId],[IpConfigurationId],",
              "[Drop],[DropType],[MilestoneId],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffSet] as int) as [Trend OffSet],",
              "              [Complete],[UsingProductsSummary],[UsingProducts],[Visible], [Revision],[TrendChangeReason],",
              "              case when [TrendChangeDate] is not null and [TrendChangeDate]<>'' then cast([TrendChangeDate] as date) else null end as [TrendChangeDate] ,",
              "              case when ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')  then 1 else 2 end as [is_execution_drop],",
              "              case when [DropType] = 'Standard' then 1 else 0 end as [is_standard_drop],",
              "              case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is_hotfix], ",
              "              case when [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange') then 1 else 0  END as  [is_pcr_standard_tech],",
              "              case when [Complete] = 'Yes' then 1 else 0 end as [is_complete],",
              "              case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is_stale],",
              "              case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is_late],",
              "              case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is_2_or_more_weeks_late],",
              "              case when [PorYYYYWW] >= datepart(ww,getdate()) then 1 else 0 end as [por_in_future],",
              "              case when [TrendYYYYWW] between datepart(ww,getutcdate()) and  datepart(ww,dateadd(week, 8, getdate())) and [Complete] = 'No' then 1 else 0 end as [incomplete_drop_in_next_8_weeks],",
              "              case when [TrendYYYYWW] = datepart(ww,getutcdate()) then 1 else  datediff(week,getutcdate(),[TrendExactDate]) end *1.0 as [trend_minus_today_with_zero],",
              "\tcase when [trend_minus_today_with_zero] =0 or [trend_minus_today_with_zero] is null then 1 else [trend_minus_today_with_zero] end *1.0 as [trend_minus_today] ,",
              "              round(case when [PorYYYYWW] is null or [TrendYYYYWW] is null then null else cast([Trend OffSet]as double)/[trend_minus_today] end  * 100,0) as [effective_buffer],",
              "              CASE WHEN [effective_buffer] is null THEN null WHEN [effective_buffer]<=10 THEN 'red'WHEN [effective_buffer]<=20 THEN 'yellow' ELSE  'green'END as [effective_buffer_classification]",
              "              from [V_IPG_CARBON_milestone]",
              "              where [DevOrg] = 'IPG'",
              "              and [Visible] = 'Yes'",
              "              and ([complete] = 'No' or ([complete] = 'Yes' and [TrendYYYYWW] >= DATEPART(ww, dateadd(month,-2,GETDATE()))))  ",
              "              and ([Drop] in ('POLO','PROD','EV','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%')",
              "              ) as milestone",
              "on ip.[IpConfigurationId]= milestone.[IpConfigurationId]",
              "left join",
              "              (select  [MilestoneId],",
              "              max(case when [CommentType]  ='Late Reason' then [Summary] else null end )as [Late Reason],",
              "              max(case when [CommentType]  ='Redrop Reason' then [Summary] else null end )as [Redrop Reason],",
              "              max(case when [CommentType]  ='Mitigation' then [Summary] else null end )as [Mitigation],",
              "              max(case when [CommentType]  ='Future Prevention' then [Summary] else null end)as [Future Prevention],",
              "              max(case when [CommentType]  ='Impact' then [Summary] else null end )as [Impact]",
              "             from [V_IPG_CARBON_MILESTONE_COMMENT_SUMMARY_WITH_AREA] ",
              "              where [CommentType] in ( 'Late Reason','Redrop Reason','Mitigation','Future Prevention','Impact') ",
              "              and [Summary] is not null",
              "              group by [MilestoneId])retrospective",
              "on milestone.[MilestoneId] = retrospective.[MilestoneId] ",
              "left join",
              "\t(select distinct[IpConfigurationId],",
              "\tmax(case when [key]= 'HAS' then [value] end) as [HAS],",
              "\tmax(case when [key]in ('Integration Guide','Integration Guide XLS') then [value] end) as [Integration Guide]",
              "\tfrom[V_IPG_CARBON_IP_CONFIGURATION_ATTRIBUTE]",
              "\twhere[key] in ('HAS','Integration Guide','Integration Guide XLS' )",
              "\tgroup by [IpConfigurationId]) as docs",
              "on ip.[IpConfigurationId]=docs.[IpConfigurationId]",
              "left join",
              "\t(select distinct [IpConfigurationID], [Idsid] as [ip_schedule_contact]",
              "\tfrom [V_IPG_CARBON_CONTACTS]",
              "\twhere  [Caption]= 'IP Schedule Contact'",
              "\tand [IpConfigurationID] is not null",
              "\tand [Idsid]is not null) as contact",
              "on ip.[IpConfigurationId]=contact.[IpConfigurationId]",
              "left join",
              "\t(select [Domain],[IndicatorId],[Indicator],[BucketId],[Bucket],",
              "\tcast([BucketOrder]as int)as [BucketOrder],",
              "\tcast([IndicatorOrder]as int)as[IndicatorOrder],",
              "\tcast([DomainOrder]as int)as [DomainOrder],",
              "\t[Description],[Timeframe],[Green],[Yellow],[Red]",
              "\tfrom [ipg_weekly_package_vectors]",
              "\twhere [Visible] = 1  ",
              "\t) as indicator",
              "on 1=1</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "configuration_milestone_key",
        "columns": [
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId"
          }
        ],
        "partitions": [
          {
            "name": "configuration_milestone_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  [IpConfigurationId], [MilestoneId],",
                " [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId]",
                "from [V_IPG_CARBON_milestone]",
                "where [DevOrg] = 'IPG'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [IpConfigurationId], [MilestoneId],",
                  " [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId]",
                  "from [V_IPG_CARBON_milestone]",
                  "where [DevOrg] = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  [IpConfigurationId], [MilestoneId],",
              " [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId]",
              "from [V_IPG_CARBON_milestone]",
              "where [DevOrg] = 'IPG'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "configuration_milestone_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [IpConfigurationId], [MilestoneId],",
              " [IpConfigurationId]+', '+  [MilestoneId] as [IpConfigurationId, MilestoneId]",
              "from [V_IPG_CARBON_milestone]",
              "where [DevOrg] = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ipg_bug",
        "columns": [
          {
            "type": "calculated",
            "name": "is_found_by_soc",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(CONTAINSSTRING([is_found_bySoc], \"Found by SoC\"),1,0)"
          },
          {
            "type": "calculated",
            "name": "is_active_or_complete",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([status] in {\"future\",\"rejected\"},0,1)"
          },
          {
            "type": "calculated",
            "name": "is_new_int",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "VALUE([is_new])"
          },
          {
            "type": "calculated",
            "name": "showstopper_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(",
              "[IsUnique]= \"1\"&&",
              "[is_active_or_complete] =1&&",
              "CONTAINSSTRING([priority],\"showstopper\")",
              ",1,0)"
            ]
          },
          {
            "type": "calculated",
            "name": "postsi_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(",
              "[IsUnique]= \"1\"&&",
              "[is_active_or_complete] =1&&",
              "[is_PreSiPostSi]= \"PostSiBugs\"",
              ",1,0)"
            ]
          },
          {
            "type": "calculated",
            "name": "presi_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(",
              "[IsUnique]= \"1\"&&",
              "[is_active_or_complete] =1&&",
              "[is_PreSiPostSi]= \"PreSiBugs\"&&",
              "[is_found_by_soc]=1&&",
              "(ipg_bug[is_new]=\"1\" || (CONTAINSSTRING([priority],\"showstopper\") && ipg_bug[is_active_bug]= \"1\"))",
              ",1,0)"
            ]
          },
          {
            "type": "calculated",
            "name": "response_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(",
              "[response_time_filter]= \"1\"&&",
              "([is_response_met] =\"1\" ||[is_response_failed] =\"1\")",
              ",1,0)"
            ]
          },
          {
            "type": "calculated",
            "name": "resolution_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(",
              "[resolution_time_filter]= \"1\"&&",
              "([is_resolution_met] =\"1\" ||[is_resolution_failed] =\"1\")",
              ",1,0)"
            ]
          },
          {
            "type": "calculated",
            "name": "resolution_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ipg_bug[is_resolution_met]=\"1\", \"Met SLA\",",
              "IF(ipg_bug[is_resolution_failed]=\"1\", \"Failed SLA\"",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "response_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ipg_bug[is_response_met]=\"1\", \"Met SLA\",",
              "IF(ipg_bug[is_response_failed]=\"1\", \"Failed SLA\"",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "response_legend_int",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ipg_bug[is_response_met]=\"1\", 1,",
              "IF(ipg_bug[is_response_failed]=\"1\", 0",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "resolution_legend_int",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ipg_bug[is_resolution_met]=\"1\", 1,",
              "IF(ipg_bug[is_resolution_failed]=\"1\", 0",
              "))"
            ]
          },
          {
            "name": "bug_category",
            "dataType": "string",
            "sourceColumn": "bug_category"
          },
          {
            "name": "bugeco.type",
            "dataType": "string",
            "sourceColumn": "bugeco.type"
          },
          {
            "name": "closed_date",
            "dataType": "string",
            "sourceColumn": "closed_date"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "env_found",
            "dataType": "string",
            "sourceColumn": "env_found"
          },
          {
            "name": "id",
            "dataType": "string",
            "sourceColumn": "id"
          },
          {
            "name": "IPFamily",
            "dataType": "string",
            "sourceColumn": "IPFamily"
          },
          {
            "name": "is_active_bug",
            "dataType": "string",
            "sourceColumn": "is_active_bug"
          },
          {
            "name": "is_found_bySoc",
            "dataType": "string",
            "sourceColumn": "is_found_bySoc"
          },
          {
            "name": "is_new",
            "dataType": "string",
            "sourceColumn": "is_new"
          },
          {
            "name": "is_PreSiPostSi",
            "dataType": "string",
            "sourceColumn": "is_PreSiPostSi"
          },
          {
            "name": "is_resolution_failed",
            "dataType": "string",
            "sourceColumn": "is_resolution_failed"
          },
          {
            "name": "is_resolution_met",
            "dataType": "string",
            "sourceColumn": "is_resolution_met"
          },
          {
            "name": "is_response_failed",
            "dataType": "string",
            "sourceColumn": "is_response_failed"
          },
          {
            "name": "is_response_met",
            "dataType": "string",
            "sourceColumn": "is_response_met"
          },
          {
            "name": "IsUnique",
            "dataType": "string",
            "sourceColumn": "IsUnique"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority"
          },
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project"
          },
          {
            "name": "release",
            "dataType": "string",
            "sourceColumn": "release"
          },
          {
            "name": "resolution_time_filter",
            "dataType": "string",
            "sourceColumn": "resolution_time_filter"
          },
          {
            "name": "resolutionSLA",
            "dataType": "string",
            "sourceColumn": "resolutionSLA"
          },
          {
            "name": "response_time_filter",
            "dataType": "string",
            "sourceColumn": "response_time_filter"
          },
          {
            "name": "responseSLA",
            "dataType": "string",
            "sourceColumn": "responseSLA"
          },
          {
            "name": "sla_resolution_date",
            "dataType": "string",
            "sourceColumn": "sla_resolution_date"
          },
          {
            "name": "sla_resolution_met",
            "dataType": "string",
            "sourceColumn": "sla_resolution_met"
          },
          {
            "name": "sla_response_date",
            "dataType": "string",
            "sourceColumn": "sla_response_date"
          },
          {
            "name": "sla_response_met",
            "dataType": "string",
            "sourceColumn": "sla_response_met"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status"
          },
          {
            "name": "status_detail",
            "dataType": "string",
            "sourceColumn": "status_detail"
          },
          {
            "name": "submitted_by",
            "dataType": "string",
            "sourceColumn": "submitted_by"
          },
          {
            "name": "submitted_date",
            "dataType": "string",
            "sourceColumn": "submitted_date"
          },
          {
            "name": "team_found",
            "dataType": "string",
            "sourceColumn": "team_found"
          },
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url",
            "dataCategory": "WebUrl"
          },
          {
            "name": "ww_closed_date",
            "dataType": "string",
            "sourceColumn": "ww_closed_date"
          },
          {
            "name": "ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "ww_submitted_date"
          },
          {
            "name": "ww_submitted_nbr",
            "dataType": "string",
            "sourceColumn": "ww_submitted_nbr"
          },
          {
            "type": "calculated",
            "name": "presi_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ipg_bug[is_new]=\"1\" ,\"New\",",
              "IF(CONTAINSSTRING([priority],\"showstopper\"), \"Showstopper\"",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "new_active_total_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([is_new_int]=1,\"New\",",
              "IF([is_active_bug]=\"1\",\"Active\",",
              "\"Total\"",
              "))"
            ],
            "sortByColumn": "new_active_total_legend_int"
          },
          {
            "type": "calculated",
            "name": "new_active_total_legend_int",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([is_new_int]=1,1,",
              "IF([is_active_bug]=\"1\",2,",
              "3",
              "))",
              ""
            ]
          },
          {
            "name": "QueryBug.is_submitted_in_last_year",
            "dataType": "string",
            "sourceColumn": "QueryBug.is_submitted_in_last_year"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/IPG_Bug intel com;IPG_Bug\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[QueryBug]\", {\"[QueryBug].[bug_category].[bug_category]\", \"[QueryBug].[bugeco.type].[bugeco.type]\", \"[QueryBug].[closed_date].[closed_date]\", \"[QueryBug].[Configuration].[Configuration]\", \"[QueryBug].[env_found].[env_found]\", \"[QueryBug].[id].[id]\", \"[QueryBug].[IPFamily].[IPFamily]\", \"[QueryBug].[is_active_bug].[is_active_bug]\", \"[QueryBug].[is_found_bySoc].[is_found_bySoc]\", \"[QueryBug].[is_new].[is_new]\", \"[QueryBug].[is_PreSiPostSi].[is_PreSiPostSi]\", \"[QueryBug].[is_resolution_failed].[is_resolution_failed]\", \"[QueryBug].[is_resolution_met].[is_resolution_met]\", \"[QueryBug].[is_response_failed].[is_response_failed]\", \"[QueryBug].[is_response_met].[is_response_met]\", \"[QueryBug].[is_submitted_in_last_year].[is_submitted_in_last_year]\", \"[QueryBug].[IsUnique].[IsUnique]\", \"[QueryBug].[owner].[owner]\", \"[QueryBug].[priority].[priority]\", \"[QueryBug].[project].[project]\", \"[QueryBug].[release].[release]\", \"[QueryBug].[resolution_time_filter].[resolution_time_filter]\", \"[QueryBug].[resolutionSLA].[resolutionSLA]\", \"[QueryBug].[response_time_filter].[response_time_filter]\", \"[QueryBug].[responseSLA].[responseSLA]\", \"[QueryBug].[sla_resolution_date].[sla_resolution_date]\", \"[QueryBug].[sla_resolution_met].[sla_resolution_met]\", \"[QueryBug].[sla_response_date].[sla_response_date]\", \"[QueryBug].[sla_response_met].[sla_response_met]\", \"[QueryBug].[status].[status]\", \"[QueryBug].[status_detail].[status_detail]\", \"[QueryBug].[submitted_by].[submitted_by]\", \"[QueryBug].[submitted_date].[submitted_date]\", \"[QueryBug].[team_found].[team_found]\", \"[QueryBug].[tenant].[tenant]\", \"[QueryBug].[title].[title]\", \"[QueryBug].[url].[url]\", \"[QueryBug].[ww_closed_date].[ww_closed_date]\", \"[QueryBug].[ww_submitted_date].[ww_submitted_date]\", \"[QueryBug].[ww_submitted_nbr].[ww_submitted_nbr]\"}, {\"QueryBug.bug_category\", \"QueryBug.bugeco.type\", \"QueryBug.closed_date\", \"QueryBug.Configuration\", \"QueryBug.env_found\", \"QueryBug.id\", \"QueryBug.IPFamily\", \"QueryBug.is_active_bug\", \"QueryBug.is_found_bySoc\", \"QueryBug.is_new\", \"QueryBug.is_PreSiPostSi\", \"QueryBug.is_resolution_failed\", \"QueryBug.is_resolution_met\", \"QueryBug.is_response_failed\", \"QueryBug.is_response_met\", \"QueryBug.is_submitted_in_last_year\", \"QueryBug.IsUnique\", \"QueryBug.owner\", \"QueryBug.priority\", \"QueryBug.project\", \"QueryBug.release\", \"QueryBug.resolution_time_filter\", \"QueryBug.resolutionSLA\", \"QueryBug.response_time_filter\", \"QueryBug.responseSLA\", \"QueryBug.sla_resolution_date\", \"QueryBug.sla_resolution_met\", \"QueryBug.sla_response_date\", \"QueryBug.sla_response_met\", \"QueryBug.status\", \"QueryBug.status_detail\", \"QueryBug.submitted_by\", \"QueryBug.submitted_date\", \"QueryBug.team_found\", \"QueryBug.tenant\", \"QueryBug.title\", \"QueryBug.url\", \"QueryBug.ww_closed_date\", \"QueryBug.ww_submitted_date\", \"QueryBug.ww_submitted_nbr\"}}",
                "        }),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Added Items\", each [QueryBug.bugeco.type] = \"bug\"),",
                "    #\"Only Last 52 ww\" = Table.SelectRows(#\"Filtered Rows\", each (Cube.AttributeMemberId([QueryBug.is_submitted_in_last_year]) = \"[QueryBug].[is_submitted_in_last_year].&[1]\" meta [DisplayName = \"1\"])),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Only Last 52 ww\",{{\"QueryBug.bug_category\", \"bug_category\"}, {\"QueryBug.bugeco.type\", \"bugeco.type\"}, {\"QueryBug.closed_date\", \"closed_date\"}, {\"QueryBug.Configuration\", \"Configuration\"}, {\"QueryBug.env_found\", \"env_found\"}, {\"QueryBug.id\", \"id\"}, {\"QueryBug.IPFamily\", \"IPFamily\"}, {\"QueryBug.is_active_bug\", \"is_active_bug\"}, {\"QueryBug.is_found_bySoc\", \"is_found_bySoc\"}, {\"QueryBug.is_new\", \"is_new\"}, {\"QueryBug.is_PreSiPostSi\", \"is_PreSiPostSi\"}, {\"QueryBug.is_resolution_failed\", \"is_resolution_failed\"}, {\"QueryBug.is_resolution_met\", \"is_resolution_met\"}, {\"QueryBug.is_response_failed\", \"is_response_failed\"}, {\"QueryBug.is_response_met\", \"is_response_met\"}, {\"QueryBug.IsUnique\", \"IsUnique\"}, {\"QueryBug.owner\", \"owner\"}, {\"QueryBug.priority\", \"priority\"}, {\"QueryBug.project\", \"project\"}, {\"QueryBug.release\", \"release\"}, {\"QueryBug.resolution_time_filter\", \"resolution_time_filter\"}, {\"QueryBug.resolutionSLA\", \"resolutionSLA\"}, {\"QueryBug.response_time_filter\", \"response_time_filter\"}, {\"QueryBug.responseSLA\", \"responseSLA\"}, {\"QueryBug.sla_resolution_date\", \"sla_resolution_date\"}, {\"QueryBug.sla_resolution_met\", \"sla_resolution_met\"}, {\"QueryBug.sla_response_date\", \"sla_response_date\"}, {\"QueryBug.sla_response_met\", \"sla_response_met\"}, {\"QueryBug.status\", \"status\"}, {\"QueryBug.status_detail\", \"status_detail\"}, {\"QueryBug.submitted_by\", \"submitted_by\"}, {\"QueryBug.submitted_date\", \"submitted_date\"}, {\"QueryBug.team_found\", \"team_found\"}, {\"QueryBug.tenant\", \"tenant\"}, {\"QueryBug.title\", \"title\"}, {\"QueryBug.url\", \"url\"}, {\"QueryBug.ww_closed_date\", \"ww_closed_date\"}, {\"QueryBug.ww_submitted_date\", \"ww_submitted_date\"}, {\"QueryBug.ww_submitted_nbr\", \"ww_submitted_nbr\"}})",
                "in",
                "    #\"Renamed Columns\""
              ]
            }
          }
        ]
      },
      {
        "name": "ipg_feature",
        "columns": [
          {
            "type": "calculated",
            "name": "is_new_int",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "VALUE([Is_New])"
          },
          {
            "name": "hsdes_jira_status",
            "dataType": "string",
            "sourceColumn": "hsdes_jira_status"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "FeatureLiveData",
            "dataType": "string",
            "sourceColumn": "FeatureLiveData"
          },
          {
            "name": "id",
            "dataType": "string",
            "sourceColumn": "id"
          },
          {
            "name": "IPFamily",
            "dataType": "string",
            "sourceColumn": "IPFamily"
          },
          {
            "name": "Is_Active",
            "dataType": "string",
            "sourceColumn": "Is_Active"
          },
          {
            "name": "Is_Active_Or_Complete",
            "dataType": "string",
            "sourceColumn": "Is_Active_Or_Complete"
          },
          {
            "name": "Is_New",
            "dataType": "string",
            "sourceColumn": "Is_New"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner"
          },
          {
            "name": "Owner Name",
            "dataType": "string",
            "sourceColumn": "Owner Name"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority"
          },
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project"
          },
          {
            "name": "reason",
            "dataType": "string",
            "sourceColumn": "reason"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "name": "SoC Die",
            "dataType": "string",
            "sourceColumn": "SoC Die"
          },
          {
            "name": "submitted_by",
            "dataType": "string",
            "sourceColumn": "submitted_by"
          },
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url",
            "dataCategory": "WebUrl"
          },
          {
            "name": "ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "ww_submitted_date"
          },
          {
            "type": "calculated",
            "name": "features_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([is_new_int]=1,\"New\",",
              "IF([Is_Active]=\"1\",\"Active\",",
              "\"Total\"",
              "))"
            ],
            "sortByColumn": "features_legend_int"
          },
          {
            "type": "calculated",
            "name": "features_legend_int",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([is_new_int]=1,1,",
              "IF([Is_Active]=\"1\",2,",
              "3",
              "))"
            ]
          },
          {
            "name": "QueryFeature.is_submitted_in_last_year",
            "dataType": "string",
            "sourceColumn": "QueryFeature.is_submitted_in_last_year"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/IPG_feature intel com;IPG_feature\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[QueryFeature]\", {\"[QueryFeature].[Configuration].[Configuration]\", \"[QueryFeature].[FeatureLiveData].[FeatureLiveData]\", \"[QueryFeature].[hsdes_jira_status].[hsdes_jira_status]\", \"[QueryFeature].[id].[id]\", \"[QueryFeature].[IPFamily].[IPFamily]\", \"[QueryFeature].[Is_Active].[Is_Active]\", \"[QueryFeature].[Is_Active_Or_Complete].[Is_Active_Or_Complete]\", \"[QueryFeature].[Is_New].[Is_New]\", \"[QueryFeature].[is_submitted_in_last_year].[is_submitted_in_last_year]\", \"[QueryFeature].[owner].[owner]\", \"[QueryFeature].[Owner Name].[Owner Name]\", \"[QueryFeature].[priority].[priority]\", \"[QueryFeature].[project].[project]\", \"[QueryFeature].[reason].[reason]\", \"[QueryFeature].[SoC].[SoC]\", \"[QueryFeature].[SoC Die].[SoC Die]\", \"[QueryFeature].[submitted_by].[submitted_by]\", \"[QueryFeature].[tenant].[tenant]\", \"[QueryFeature].[title].[title]\", \"[QueryFeature].[url].[url]\", \"[QueryFeature].[ww_submitted_date].[ww_submitted_date]\"}, {\"QueryFeature.Configuration\", \"QueryFeature.FeatureLiveData\", \"QueryFeature.hsdes_jira_status\", \"QueryFeature.id\", \"QueryFeature.IPFamily\", \"QueryFeature.Is_Active\", \"QueryFeature.Is_Active_Or_Complete\", \"QueryFeature.Is_New\", \"QueryFeature.is_submitted_in_last_year\", \"QueryFeature.owner\", \"QueryFeature.Owner Name\", \"QueryFeature.priority\", \"QueryFeature.project\", \"QueryFeature.reason\", \"QueryFeature.SoC\", \"QueryFeature.SoC Die\", \"QueryFeature.submitted_by\", \"QueryFeature.tenant\", \"QueryFeature.title\", \"QueryFeature.url\", \"QueryFeature.ww_submitted_date\"}}",
                "        }),",
                "    #\"Last 52 ww\" = Table.SelectRows(#\"Added Items\", each (Cube.AttributeMemberId([QueryFeature.is_submitted_in_last_year]) = \"[QueryFeature].[is_submitted_in_last_year].&[1]\" meta [DisplayName = \"1\"])),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Last 52 ww\", each [QueryFeature.FeatureLiveData] = \"1\"),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows\",{{\"QueryFeature.hsdes_jira_status\", \"hsdes_jira_status\"}, {\"QueryFeature.Configuration\", \"Configuration\"}, {\"QueryFeature.FeatureLiveData\", \"FeatureLiveData\"}, {\"QueryFeature.id\", \"id\"}, {\"QueryFeature.IPFamily\", \"IPFamily\"}, {\"QueryFeature.Is_Active\", \"Is_Active\"}, {\"QueryFeature.Is_Active_Or_Complete\", \"Is_Active_Or_Complete\"}, {\"QueryFeature.Is_New\", \"Is_New\"}, {\"QueryFeature.owner\", \"owner\"}, {\"QueryFeature.Owner Name\", \"Owner Name\"}, {\"QueryFeature.priority\", \"priority\"}, {\"QueryFeature.project\", \"project\"}, {\"QueryFeature.reason\", \"reason\"}, {\"QueryFeature.SoC\", \"SoC\"}, {\"QueryFeature.SoC Die\", \"SoC Die\"}, {\"QueryFeature.submitted_by\", \"submitted_by\"}, {\"QueryFeature.tenant\", \"tenant\"}, {\"QueryFeature.title\", \"title\"}, {\"QueryFeature.url\", \"url\"}, {\"QueryFeature.ww_submitted_date\", \"ww_submitted_date\"}})",
                "in",
                "    #\"Renamed Columns\""
              ]
            }
          }
        ]
      },
      {
        "name": "configuration_key",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "configuration_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  [IpConfigurationId], [Name] as [Configuration]",
                "from [V_IPG_CARBON_IPCONFIGURATION]",
                "where [Org] = 'IPG'",
                "and [Name] is not null",
                "and [Name] <>''"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [IpConfigurationId], [Name] as [Configuration]",
                  "from [V_IPG_CARBON_IPCONFIGURATION]",
                  "where [Org] = 'IPG'",
                  "and [Name] is not null",
                  "and [Name] <>''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  [IpConfigurationId], [Name] as [Configuration]",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where [Org] = 'IPG'",
              "and [Name] is not null",
              "and [Name] <>''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "configuration_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [IpConfigurationId], [Name] as [Configuration]",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where [Org] = 'IPG'",
              "and [Name] is not null",
              "and [Name] <>''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ipg_tfm",
        "columns": [
          {
            "type": "calculated",
            "name": "is_showstopper_high_medium",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([is_high]=\"1\" || [is_showstopper] = \"1\"||[priority]= \"3-medium\",1,0)"
          },
          {
            "type": "calculated",
            "name": "is_medium",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([priority]= \"3-medium\",1,0)"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "component",
            "dataType": "string",
            "sourceColumn": "component"
          },
          {
            "name": "family",
            "dataType": "string",
            "sourceColumn": "family"
          },
          {
            "name": "filing_division",
            "dataType": "string",
            "sourceColumn": "filing_division"
          },
          {
            "name": "filing_group",
            "dataType": "string",
            "sourceColumn": "filing_group"
          },
          {
            "name": "filing_ip",
            "dataType": "string",
            "sourceColumn": "filing_ip"
          },
          {
            "name": "filing_project",
            "dataType": "string",
            "sourceColumn": "filing_project"
          },
          {
            "name": "Id",
            "dataType": "string",
            "sourceColumn": "Id"
          },
          {
            "name": "IpConfigurationId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId"
          },
          {
            "name": "is_bug",
            "dataType": "string",
            "sourceColumn": "is_bug"
          },
          {
            "name": "is_high",
            "dataType": "string",
            "sourceColumn": "is_high"
          },
          {
            "name": "is_showstopper",
            "dataType": "string",
            "sourceColumn": "is_showstopper"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority"
          },
          {
            "name": "release",
            "dataType": "string",
            "sourceColumn": "release"
          },
          {
            "name": "site",
            "dataType": "string",
            "sourceColumn": "site"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status"
          },
          {
            "name": "status_reason",
            "dataType": "string",
            "sourceColumn": "status_reason"
          },
          {
            "name": "submitted_by",
            "dataType": "string",
            "sourceColumn": "submitted_by"
          },
          {
            "name": "submitted_ww",
            "dataType": "string",
            "sourceColumn": "submitted_ww"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "tfm_legend_int",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([is_showstopper] =\"1\",1,2)"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner"
          },
          {
            "name": "sla_resolution_met",
            "dataType": "string",
            "sourceColumn": "sla_resolution_met"
          },
          {
            "name": "sla_response_met",
            "dataType": "string",
            "sourceColumn": "sla_response_met"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/ipg_tfm intel com;ipg_tfm\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[tfm_data]\", {\"[tfm_data].[component].[component]\", \"[tfm_data].[Configuration].[Configuration]\", \"[tfm_data].[family].[family]\", \"[tfm_data].[filing_division].[filing_division]\", \"[tfm_data].[filing_group].[filing_group]\", \"[tfm_data].[filing_ip].[filing_ip]\", \"[tfm_data].[filing_project].[filing_project]\", \"[tfm_data].[Id].[Id]\", \"[tfm_data].[IpConfigurationId].[IpConfigurationId]\", \"[tfm_data].[is_bug].[is_bug]\", \"[tfm_data].[is_high].[is_high]\", \"[tfm_data].[is_showstopper].[is_showstopper]\", \"[tfm_data].[owner].[owner]\", \"[tfm_data].[priority].[priority]\", \"[tfm_data].[release].[release]\", \"[tfm_data].[site].[site]\", \"[tfm_data].[sla_resolution_met].[sla_resolution_met]\", \"[tfm_data].[sla_response_met].[sla_response_met]\", \"[tfm_data].[status].[status]\", \"[tfm_data].[status_reason].[status_reason]\", \"[tfm_data].[submitted_by].[submitted_by]\", \"[tfm_data].[submitted_ww].[submitted_ww]\", \"[tfm_data].[title].[title]\", \"[tfm_data].[url].[url]\"}, {\"tfm_data.component\", \"tfm_data.Configuration\", \"tfm_data.family\", \"tfm_data.filing_division\", \"tfm_data.filing_group\", \"tfm_data.filing_ip\", \"tfm_data.filing_project\", \"tfm_data.Id\", \"tfm_data.IpConfigurationId\", \"tfm_data.is_bug\", \"tfm_data.is_high\", \"tfm_data.is_showstopper\", \"tfm_data.owner\", \"tfm_data.priority\", \"tfm_data.release\", \"tfm_data.site\", \"tfm_data.sla_resolution_met\", \"tfm_data.sla_response_met\", \"tfm_data.status\", \"tfm_data.status_reason\", \"tfm_data.submitted_by\", \"tfm_data.submitted_ww\", \"tfm_data.title\", \"tfm_data.url\"}}",
                "        }),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Added Items\", each (Cube.AttributeMemberId([tfm_data.status]) = \"[tfm_data].[status].&[open]\" meta [DisplayName = \"open\"]) and (Cube.AttributeMemberId([tfm_data.is_bug]) = \"[tfm_data].[is_bug].&[1]\" meta [DisplayName = \"1\"])),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows\",{{\"tfm_data.Configuration\", \"Configuration\"}, {\"tfm_data.component\", \"component\"}, {\"tfm_data.family\", \"family\"}, {\"tfm_data.filing_division\", \"filing_division\"}, {\"tfm_data.filing_group\", \"filing_group\"}, {\"tfm_data.filing_ip\", \"filing_ip\"}, {\"tfm_data.filing_project\", \"filing_project\"}, {\"tfm_data.Id\", \"Id\"}, {\"tfm_data.IpConfigurationId\", \"IpConfigurationId\"}, {\"tfm_data.is_bug\", \"is_bug\"}, {\"tfm_data.is_high\", \"is_high\"}, {\"tfm_data.is_showstopper\", \"is_showstopper\"}, {\"tfm_data.priority\", \"priority\"}, {\"tfm_data.release\", \"release\"}, {\"tfm_data.site\", \"site\"}, {\"tfm_data.status\", \"status\"}, {\"tfm_data.status_reason\", \"status_reason\"}, {\"tfm_data.submitted_by\", \"submitted_by\"}, {\"tfm_data.submitted_ww\", \"submitted_ww\"}, {\"tfm_data.title\", \"title\"}, {\"tfm_data.url\", \"url\"}, {\"tfm_data.sla_response_met\", \"sla_response_met\"}, {\"tfm_data.sla_resolution_met\", \"sla_resolution_met\"}, {\"tfm_data.owner\", \"owner\"}})",
                "in",
                "    #\"Renamed Columns\""
              ]
            }
          }
        ]
      },
      {
        "name": "ipg_regression",
        "columns": [
          {
            "name": "color_category",
            "dataType": "string",
            "sourceColumn": "color_category"
          },
          {
            "name": "IPConfiguration",
            "dataType": "string",
            "sourceColumn": "IPConfiguration"
          },
          {
            "name": "metric",
            "dataType": "string",
            "sourceColumn": "metric"
          },
          {
            "name": "Reg_Pass_Rate",
            "dataType": "string",
            "sourceColumn": "Reg_Pass_Rate"
          },
          {
            "name": "target",
            "dataType": "string",
            "sourceColumn": "target"
          },
          {
            "name": "ww_num",
            "dataType": "string",
            "sourceColumn": "ww_num"
          },
          {
            "type": "calculated",
            "name": "number_target",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Reg_Pass_Rate]&\"/\"&[target]"
          },
          {
            "name": "latest",
            "dataType": "string",
            "sourceColumn": "latest"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/IPG_regression intel com;IPG_regression\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[REGRESSIONS_ALL]\", {\"[REGRESSIONS_ALL].[color_category].[color_category]\", \"[REGRESSIONS_ALL].[IPConfiguration].[IPConfiguration]\", \"[REGRESSIONS_ALL].[latest].[latest]\", \"[REGRESSIONS_ALL].[metric].[metric]\", \"[REGRESSIONS_ALL].[Reg_Pass_Rate].[Reg_Pass_Rate]\", \"[REGRESSIONS_ALL].[target].[target]\", \"[REGRESSIONS_ALL].[ww_num].[ww_num]\"}, {\"REGRESSIONS_ALL.color_category\", \"REGRESSIONS_ALL.IPConfiguration\", \"REGRESSIONS_ALL.latest\", \"REGRESSIONS_ALL.metric\", \"REGRESSIONS_ALL.Reg_Pass_Rate\", \"REGRESSIONS_ALL.target\", \"REGRESSIONS_ALL.ww_num\"}}",
                "        }),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Items\",{{\"REGRESSIONS_ALL.color_category\", \"color_category\"}, {\"REGRESSIONS_ALL.IPConfiguration\", \"IPConfiguration\"}, {\"REGRESSIONS_ALL.metric\", \"metric\"}, {\"REGRESSIONS_ALL.Reg_Pass_Rate\", \"Reg_Pass_Rate\"}, {\"REGRESSIONS_ALL.target\", \"target\"}, {\"REGRESSIONS_ALL.ww_num\", \"ww_num\"}, {\"REGRESSIONS_ALL.latest\", \"latest\"}}),",
                "    #\"Filtered Rows2\" = Table.SelectRows(#\"Renamed Columns\", each [latest] = \"latest\"),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Filtered Rows2\", each [IPConfiguration] <> null and [IPConfiguration] <> \"<Unassigned>\"),",
                "    #\"Filtered Rows1\" = Table.SelectRows(#\"Filtered Rows\", each (Cube.AttributeMemberId([color_category]) <> \"[REGRESSIONS_ALL].[color_category].&\" meta [DisplayName = \"(null)\"]))",
                "in",
                "    #\"Filtered Rows1\""
              ]
            }
          }
        ]
      },
      {
        "name": "ipg_coverage",
        "columns": [
          {
            "name": "color_category",
            "dataType": "string",
            "sourceColumn": "color_category"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "Coverage",
            "dataType": "string",
            "sourceColumn": "Coverage"
          },
          {
            "name": "ind_metric",
            "dataType": "string",
            "sourceColumn": "ind_metric"
          },
          {
            "name": "latest",
            "dataType": "string",
            "sourceColumn": "latest"
          },
          {
            "name": "target",
            "dataType": "string",
            "sourceColumn": "target"
          },
          {
            "type": "calculated",
            "name": "number_target",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Coverage]&\"/\"&[target]"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/IPG_Functional_and_Code_Coverage intel com;IPG_Functional_and_C\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[COVERAGE_ALL]\", {\"[COVERAGE_ALL].[color_category].[color_category]\", \"[COVERAGE_ALL].[Configuration].[Configuration]\", \"[COVERAGE_ALL].[Coverage].[Coverage]\", \"[COVERAGE_ALL].[ind_metric].[ind_metric]\", \"[COVERAGE_ALL].[latest].[latest]\", \"[COVERAGE_ALL].[target].[target]\"}, {\"COVERAGE_ALL.color_category\", \"COVERAGE_ALL.Configuration\", \"COVERAGE_ALL.Coverage\", \"COVERAGE_ALL.ind_metric\", \"COVERAGE_ALL.latest\", \"COVERAGE_ALL.target\"}}",
                "        }),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Added Items\", each (Cube.AttributeMemberId([COVERAGE_ALL.color_category]) <> \"[COVERAGE_ALL].[color_category].&\" meta [DisplayName = \"(null)\"])),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows\",{{\"COVERAGE_ALL.color_category\", \"color_category\"}, {\"COVERAGE_ALL.Coverage\", \"Coverage\"}, {\"COVERAGE_ALL.Configuration\", \"Configuration\"}, {\"COVERAGE_ALL.ind_metric\", \"ind_metric\"}, {\"COVERAGE_ALL.latest\", \"latest\"}, {\"COVERAGE_ALL.target\", \"target\"}}),",
                "    #\"Filtered Rows1\" = Table.SelectRows(#\"Renamed Columns\", each [latest] = \"latest\")",
                "in",
                "    #\"Filtered Rows1\""
              ]
            }
          }
        ]
      },
      {
        "name": "ipg_testplan",
        "columns": [
          {
            "name": "color_category",
            "dataType": "string",
            "sourceColumn": "color_category"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "latest",
            "dataType": "string",
            "sourceColumn": "latest"
          },
          {
            "name": "metric",
            "dataType": "string",
            "sourceColumn": "metric"
          },
          {
            "name": "target",
            "dataType": "string",
            "sourceColumn": "target"
          },
          {
            "name": "Val_%_done",
            "dataType": "string",
            "sourceColumn": "Val_%_done"
          },
          {
            "type": "calculated",
            "name": "number_target",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Val_%_done]&\"/\"&[target]"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/IPG_TestPlan intel com;IPG_TestPlan\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[IPG_TestPlan]\", {\"[IPG_TestPlan].[color_category].[color_category]\", \"[IPG_TestPlan].[Configuration].[Configuration]\", \"[IPG_TestPlan].[latest].[latest]\", \"[IPG_TestPlan].[metric].[metric]\", \"[IPG_TestPlan].[target].[target]\", \"[IPG_TestPlan].[Val_%_done].[Val_%_done]\"}, {\"IPG_TestPlan.color_category\", \"IPG_TestPlan.Configuration\", \"IPG_TestPlan.latest\", \"IPG_TestPlan.metric\", \"IPG_TestPlan.target\", \"IPG_TestPlan.Val_%_done\"}}",
                "        }),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Items\",{{\"IPG_TestPlan.color_category\", \"color_category\"}, {\"IPG_TestPlan.Configuration\", \"Configuration\"}, {\"IPG_TestPlan.latest\", \"latest\"}, {\"IPG_TestPlan.metric\", \"metric\"}, {\"IPG_TestPlan.target\", \"target\"}, {\"IPG_TestPlan.Val_%_done\", \"Val_%_done\"}}),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Renamed Columns\", each [latest] = \"latest\"),",
                "    #\"Filtered Rows1\" = Table.SelectRows(#\"Filtered Rows\", each (Cube.AttributeMemberId([color_category]) = \"[IPG_TestPlan].[color_category].&[0]\" meta [DisplayName = \"0\"]))",
                "in",
                "    #\"Filtered Rows1\""
              ]
            }
          }
        ]
      },
      {
        "name": "ip_subip_mapping",
        "columns": [
          {
            "name": "ParentId",
            "dataType": "int64",
            "sourceColumn": "ParentId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "ChildId",
            "dataType": "int64",
            "sourceColumn": "ChildId",
            "sourceProviderType": "BigInt"
          }
        ],
        "partitions": [
          {
            "name": "ip_subip_mapping",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [ParentId],[IpConfigurationId]as [ChildId]",
                "from [V_IPG_CARBON_NESTED_IP]",
                "where  [Depth] =2"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [ParentId],[IpConfigurationId]as [ChildId]",
                  "from [V_IPG_CARBON_NESTED_IP]",
                  "where  [Depth] =2</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [ParentId],[IpConfigurationId]as [ChildId]",
              "from [V_IPG_CARBON_NESTED_IP]",
              "where  [Depth] =2"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_subip_mapping"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [ParentId],[IpConfigurationId]as [ChildId]",
              "from [V_IPG_CARBON_NESTED_IP]",
              "where  [Depth] =2</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "configuration_ALL_key",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "configuration_ALL_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  [IpConfigurationId], [Name] as [Configuration]",
                "from [V_IPG_CARBON_IPCONFIGURATION]",
                "where  [Name] is not null",
                "and [Name] <>''"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [IpConfigurationId], [Name] as [Configuration]",
                  "from [V_IPG_CARBON_IPCONFIGURATION]",
                  "where  [Name] is not null",
                  "and [Name] <>''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  [IpConfigurationId], [Name] as [Configuration]",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where  [Name] is not null",
              "and [Name] <>''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "configuration_ALL_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [IpConfigurationId], [Name] as [Configuration]",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where  [Name] is not null",
              "and [Name] <>''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "last_and_upcoming_drop",
        "columns": [
          {
            "name": "last_completed_drop_per_configuration",
            "dataType": "string",
            "sourceColumn": "last_completed_drop_per_configuration"
          },
          {
            "name": "upcoming_drop_per_configuration",
            "dataType": "string",
            "sourceColumn": "upcoming_drop_per_configuration"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "IpConfigurationId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId"
          },
          {
            "name": "is execution drop",
            "dataType": "string",
            "sourceColumn": "is execution drop"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/IPG_IPtoSOC intel com;IPG_IPtoSOC\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[ip_milestone_data]\", {\"[ip_milestone_data].[Configuration].[Configuration]\", \"[ip_milestone_data].[IpConfigurationId].[IpConfigurationId]\", \"[ip_milestone_data].[is execution drop].[is execution drop]\"}, {\"ip_milestone_data.Configuration\", \"ip_milestone_data.IpConfigurationId\", \"ip_milestone_data.is execution drop\"}},",
                "            {Cube.AddMeasureColumn, \"last_completed_drop_per_configuration\", \"[Measures].[last_completed_drop_per_configuration]\"},",
                "            {Cube.AddMeasureColumn, \"upcoming_drop_per_configuration\", \"[Measures].[upcoming_drop_per_configuration]\"}",
                "        }),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Added Items\", each (Cube.AttributeMemberId([ip_milestone_data.is execution drop]) = \"[ip_milestone_data].[is execution drop].&[1]\" meta [DisplayName = \"1\"])),",
                "    #\"Sorted Rows\" = Table.Sort(#\"Filtered Rows\",{{\"ip_milestone_data.Configuration\", Order.Ascending}}),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Sorted Rows\", {\"ip_milestone_data.IpConfigurationId\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Duplicates\",{{\"ip_milestone_data.Configuration\", \"Configuration\"}, {\"ip_milestone_data.IpConfigurationId\", \"IpConfigurationId\"}, {\"ip_milestone_data.is execution drop\", \"is execution drop\"}})",
                "in",
                "    #\"Renamed Columns\""
              ]
            }
          }
        ]
      },
      {
        "name": "ml_aip_data",
        "columns": [
          {
            "name": "f_id",
            "dataType": "string",
            "sourceColumn": "f_id"
          },
          {
            "name": "f_milestone_id",
            "dataType": "string",
            "sourceColumn": "f_milestone_id"
          },
          {
            "name": "f_predicted_proba",
            "dataType": "string",
            "sourceColumn": "f_predicted_proba"
          },
          {
            "name": "f_prediction",
            "dataType": "string",
            "sourceColumn": "f_prediction"
          },
          {
            "name": "f_ww",
            "dataType": "string",
            "sourceColumn": "f_ww"
          },
          {
            "name": "is_late",
            "dataType": "string",
            "sourceColumn": "is_late"
          },
          {
            "name": "Prediction",
            "dataType": "string",
            "sourceColumn": "Prediction"
          },
          {
            "name": "Risk Severity",
            "dataType": "string",
            "sourceColumn": "Risk Severity"
          },
          {
            "name": "Risk Severity int",
            "dataType": "string",
            "sourceColumn": "Risk Severity int"
          },
          {
            "name": "ww_legend",
            "dataType": "string",
            "sourceColumn": "ww_legend"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/IPG_ML intel com;IPG_ML\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[aip_late_predictions]\", {\"[aip_late_predictions].[f_id].[f_id]\", \"[aip_late_predictions].[f_milestone_id].[f_milestone_id]\", \"[aip_late_predictions].[f_predicted_proba].[f_predicted_proba]\", \"[aip_late_predictions].[f_prediction].[f_prediction]\", \"[aip_late_predictions].[f_ww].[f_ww]\", \"[aip_late_predictions].[is_late].[is_late]\", \"[aip_late_predictions].[Prediction].[Prediction]\", \"[aip_late_predictions].[Risk Severity].[Risk Severity]\", \"[aip_late_predictions].[Risk Severity int].[Risk Severity int]\", \"[aip_late_predictions].[ww_legend].[ww_legend]\"}, {\"aip_late_predictions.f_id\", \"aip_late_predictions.f_milestone_id\", \"aip_late_predictions.f_predicted_proba\", \"aip_late_predictions.f_prediction\", \"aip_late_predictions.f_ww\", \"aip_late_predictions.is_late\", \"aip_late_predictions.Prediction\", \"aip_late_predictions.Risk Severity\", \"aip_late_predictions.Risk Severity int\", \"aip_late_predictions.ww_legend\"}}",
                "        }),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Added Items\", each (Cube.AttributeMemberId([aip_late_predictions.ww_legend]) = \"[aip_late_predictions].[ww_legend].&[current week]\" meta [DisplayName = \"current week\"])),",
                "    #\"Removed Duplicates\" = Table.Distinct(#\"Filtered Rows\", {\"aip_late_predictions.f_milestone_id\"}),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Duplicates\",{{\"aip_late_predictions.f_id\", \"f_id\"}, {\"aip_late_predictions.f_milestone_id\", \"f_milestone_id\"}, {\"aip_late_predictions.f_predicted_proba\", \"f_predicted_proba\"}, {\"aip_late_predictions.f_prediction\", \"f_prediction\"}, {\"aip_late_predictions.f_ww\", \"f_ww\"}, {\"aip_late_predictions.is_late\", \"is_late\"}, {\"aip_late_predictions.Prediction\", \"Prediction\"}, {\"aip_late_predictions.Risk Severity\", \"Risk Severity\"}, {\"aip_late_predictions.Risk Severity int\", \"Risk Severity int\"}, {\"aip_late_predictions.ww_legend\", \"ww_legend\"}})",
                "in",
                "    #\"Renamed Columns\""
              ]
            }
          }
        ]
      },
      {
        "name": "pearl_data",
        "columns": [
          {
            "name": "checklistID",
            "dataType": "string",
            "sourceColumn": "checklistID"
          },
          {
            "name": "checklistName",
            "dataType": "string",
            "sourceColumn": "checklistName"
          },
          {
            "name": "pearl_color",
            "dataType": "string",
            "sourceColumn": "pearl_color"
          },
          {
            "name": "ipConfigID",
            "dataType": "string",
            "sourceColumn": "ipConfigID"
          },
          {
            "name": "ipConfigID, milestoneID",
            "dataType": "string",
            "sourceColumn": "ipConfigID, milestoneID"
          },
          {
            "name": "ipConfigName",
            "dataType": "string",
            "sourceColumn": "ipConfigName"
          },
          {
            "name": "milestoneID",
            "dataType": "string",
            "sourceColumn": "milestoneID"
          },
          {
            "name": "milestoneID, checklistID",
            "dataType": "string",
            "sourceColumn": "milestoneID, checklistID"
          },
          {
            "name": "pearl_color_coding",
            "dataType": "string",
            "sourceColumn": "pearl_color_coding"
          },
          {
            "name": "pearl_grade",
            "dataType": "int64",
            "sourceColumn": "pearl_grade"
          },
          {
            "name": "pearl_link",
            "dataType": "string",
            "sourceColumn": "pearl_link"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url"
          },
          {
            "name": "pearl_grade_string",
            "dataType": "string",
            "sourceColumn": "pearl_grade_string"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/IPG_IPtoSOC intel com;IPG_IPtoSOC\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[pearl_data]\", {\"[pearl_data].[checklistID].[checklistID]\", \"[pearl_data].[checklistName].[checklistName]\", \"[pearl_data].[Color].[Color]\", \"[pearl_data].[grade].[grade]\", \"[pearl_data].[ipConfigID].[ipConfigID]\", \"[pearl_data].[ipConfigID, milestoneID].[ipConfigID, milestoneID]\", \"[pearl_data].[ipConfigName].[ipConfigName]\", \"[pearl_data].[milestoneID].[milestoneID]\", \"[pearl_data].[milestoneID, checklistID].[milestoneID, checklistID]\", \"[pearl_data].[pearl_color_coding].[pearl_color_coding]\", \"[pearl_data].[pearl_grade].[pearl_grade]\", \"[pearl_data].[pearl_link].[pearl_link]\", \"[pearl_data].[url].[url]\"}, {\"pearl_data.checklistID\", \"pearl_data.checklistName\", \"pearl_data.Color\", \"pearl_data.grade\", \"pearl_data.ipConfigID\", \"pearl_data.ipConfigID, milestoneID\", \"pearl_data.ipConfigName\", \"pearl_data.milestoneID\", \"pearl_data.milestoneID, checklistID\", \"pearl_data.pearl_color_coding\", \"pearl_data.pearl_grade\", \"pearl_data.pearl_link\", \"pearl_data.url\"}}",
                "        }),",
                "    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Items\",{{\"pearl_data.checklistID\", \"checklistID\"}, {\"pearl_data.checklistName\", \"checklistName\"}, {\"pearl_data.Color\", \"pearl_color\"}, {\"pearl_data.ipConfigID\", \"ipConfigID\"}, {\"pearl_data.ipConfigID, milestoneID\", \"ipConfigID, milestoneID\"}, {\"pearl_data.ipConfigName\", \"ipConfigName\"}, {\"pearl_data.milestoneID\", \"milestoneID\"}, {\"pearl_data.milestoneID, checklistID\", \"milestoneID, checklistID\"}, {\"pearl_data.pearl_color_coding\", \"pearl_color_coding\"}, {\"pearl_data.pearl_grade\", \"pearl_grade_string\"}, {\"pearl_data.pearl_link\", \"pearl_link\"}, {\"pearl_data.url\", \"url\"}, {\"pearl_data.grade\", \"pearl_grade\"}})",
                "in",
                "    #\"Renamed Columns\""
              ]
            }
          }
        ]
      },
      {
        "name": "LQ_Data",
        "columns": [
          {
            "name": "ibi_bulk_id",
            "dataType": "int64",
            "sourceColumn": "ibi_bulk_id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "ibi_row_id",
            "dataType": "int64",
            "sourceColumn": "ibi_row_id",
            "sourceProviderType": "Integer"
          },
          {
            "name": "ibi_ins_dtm",
            "dataType": "dateTime",
            "sourceColumn": "ibi_ins_dtm",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "ibi_updt_dtm",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updt_dtm",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "CLUSTER",
            "dataType": "string",
            "sourceColumn": "CLUSTER",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "STEPPING",
            "dataType": "string",
            "sourceColumn": "STEPPING",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Branch",
            "dataType": "string",
            "sourceColumn": "Branch",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "NIGHTLY BUILD",
            "dataType": "string",
            "sourceColumn": "NIGHTLY BUILD",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "METRIC",
            "dataType": "string",
            "sourceColumn": "METRIC",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Value",
            "dataType": "string",
            "sourceColumn": "Value",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "URL",
            "dataType": "string",
            "sourceColumn": "URL",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "source_excel_file",
            "dataType": "string",
            "sourceColumn": "source_excel_file",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "sampletime",
            "dataType": "dateTime",
            "sourceColumn": "sampletime",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "type": "calculated",
            "name": "carbon_map",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[cluster]&[stepping]&[branch]"
          },
          {
            "type": "calculated",
            "name": "Configuration_Id",
            "dataType": "int64",
            "expression": "If(ISBLANK(related(LQ_Carbon_MAP[carbon_config_id])),\"0\",related(LQ_Carbon_MAP[carbon_config_id]))",
            "formatString": "0"
          },
          {
            "type": "calculated",
            "name": "value_int",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "IFERROR(VALUE(SUBSTITUTE([Value], \"%\", \"\")), blank())"
          },
          {
            "type": "calculated",
            "name": "metric_type",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "related(LQ_Dash_Target[type])"
          },
          {
            "type": "calculated",
            "name": "metric_threshold",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "related(LQ_Dash_Target[threshold])"
          },
          {
            "type": "calculated",
            "name": "color_category",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([metric_type] = \"required\", IF([Value] = \"missing\", 7, IF([Value] = \"done\", 2, IF([Value] = \"N.A.\" , 1, IF([value_int] > value([metric_threshold]), 6, 5)))), 0)"
          },
          {
            "type": "calculated",
            "name": "latest",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([sampletime] = max([sampletime]), \"latest\", \"\") "
          }
        ],
        "partitions": [
          {
            "name": "LQ_Data",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select * from",
                "[V_BM_BE_LOGIC_QUALITY_DASH_DATA]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from",
                  "[V_BM_BE_LOGIC_QUALITY_DASH_DATA]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * from",
              "[V_BM_BE_LOGIC_QUALITY_DASH_DATA]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "LQ_Data"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from",
              "[V_BM_BE_LOGIC_QUALITY_DASH_DATA]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "LQ_Carbon_MAP",
        "columns": [
          {
            "name": "lq_cluster",
            "dataType": "string",
            "sourceColumn": "lq_cluster",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "lq_stepping",
            "dataType": "string",
            "sourceColumn": "lq_stepping",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "lq_branch",
            "dataType": "string",
            "sourceColumn": "lq_branch",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "carbon_config_id",
            "dataType": "string",
            "sourceColumn": "carbon_config_id",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "type": "calculated",
            "name": "carbon_map",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[lq_cluster]&[lq_stepping]&[lq_branch]"
          }
        ],
        "partitions": [
          {
            "name": "LQ_Carbon_MAP",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select * from",
                "[ipg_lq_dash_config_map_mdm]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from",
                  "[ipg_lq_dash_config_map_mdm]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * from",
              "[ipg_lq_dash_config_map_mdm]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "LQ_Carbon_MAP"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from",
              "[ipg_lq_dash_config_map_mdm]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "LQ_Dash_Target",
        "columns": [
          {
            "name": "metric",
            "dataType": "string",
            "sourceColumn": "metric",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "type",
            "dataType": "string",
            "sourceColumn": "type",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "threshold",
            "dataType": "string",
            "sourceColumn": "threshold",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          }
        ],
        "partitions": [
          {
            "name": "LQ_Dash_Target",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "--Data from iBI",
                "select * from",
                "ipg_lqdash_targets_mdm"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>--Data from iBI",
                  "select * from",
                  "ipg_lqdash_targets_mdm</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "--Data from iBI",
              "select * from",
              "ipg_lqdash_targets_mdm"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "LQ_Dash_Target"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>--Data from iBI",
              "select * from",
              "ipg_lqdash_targets_mdm</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "2fa31d89-6613-42e3-a1fb-6a09dd280887",
        "fromTable": "ip_subip_milestone_mapping",
        "fromColumn": "ParentConfigurationId, ParentMilestoneId",
        "toTable": "configuration_milestone_key",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "8c3cc72a-8740-4695-b372-a3506a3347ba",
        "fromTable": "main",
        "fromColumn": "IpConfigurationId, MilestoneId",
        "toTable": "configuration_milestone_key",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "fb0ce8e6-8eb5-4e4c-9710-c477394babbf",
        "fromTable": "main",
        "fromColumn": "IpConfigurationId",
        "toTable": "configuration_key",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "c2f05b70-db14-4831-837d-5aff5fb1c575",
        "fromTable": "ipg_tfm",
        "fromColumn": "Configuration",
        "toTable": "configuration_key",
        "toColumn": "Configuration",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "c32cd4f3-139c-4a84-8574-07af2837a600",
        "fromTable": "ipg_bug",
        "fromColumn": "release",
        "toTable": "configuration_key",
        "toColumn": "Configuration",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "be2b2e66-a5fd-436c-8f23-a92d5955c8cf",
        "fromTable": "ipg_feature",
        "fromColumn": "Configuration",
        "toTable": "configuration_key",
        "toColumn": "Configuration",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "44cfbb85-83cc-46ff-aa21-b51b223fc493",
        "fromTable": "ipg_regression",
        "fromColumn": "IPConfiguration",
        "toTable": "configuration_key",
        "toColumn": "Configuration"
      },
      {
        "name": "26010a6c-1737-444f-9264-99444815f4f8",
        "fromTable": "main",
        "fromColumn": "IpFamilyId",
        "toTable": "release_central_family",
        "toColumn": "IpFamilyId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "697316b7-96d8-4b32-9ae8-4b4f78fd9e8d",
        "fromTable": "ipg_coverage",
        "fromColumn": "Configuration",
        "toTable": "configuration_key",
        "toColumn": "Configuration"
      },
      {
        "name": "3dd8019e-2d6a-4576-8c03-1e5f3c8dd72b",
        "fromTable": "ipg_testplan",
        "fromColumn": "Configuration",
        "toTable": "configuration_key",
        "toColumn": "Configuration"
      },
      {
        "name": "ac9a78e5-6ec1-4fd6-93a4-8d9678f1b55f",
        "fromTable": "subip_milestone_data",
        "fromColumn": "IpConfigurationId",
        "toTable": "configuration_ALL_key",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "ed77fe53-f8f2-45d6-b813-e70fd5793130",
        "fromTable": "ip_subip_mapping",
        "fromColumn": "ChildId",
        "toTable": "configuration_ALL_key",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "c56229d2-2eaf-4ffc-8c95-8b10fc4e9579",
        "fromTable": "ip_subip_mapping",
        "fromColumn": "ParentId",
        "toTable": "configuration_key",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "cca73a43-3711-4242-8f9a-3c566376cd9e",
        "fromCardinality": "one",
        "fromTable": "configuration_key",
        "fromColumn": "IpConfigurationId",
        "toTable": "last_and_upcoming_drop",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "1d473c1f-c9e5-4163-b007-59539289eb05",
        "fromTable": "main",
        "fromColumn": "MilestoneId",
        "toTable": "ml_aip_data",
        "toColumn": "f_milestone_id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "bf668300-7be7-4713-b210-76b16f7055ab",
        "fromTable": "pearl_data",
        "fromColumn": "ipConfigID, milestoneID",
        "toTable": "configuration_milestone_key",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "c3138e2d-bee3-48af-bae9-e2ecc4d1e9dd",
        "fromTable": "LQ_Data",
        "fromColumn": "METRIC",
        "toTable": "LQ_Dash_Target",
        "toColumn": "metric"
      },
      {
        "name": "380bc763-705e-4e9a-a84d-b1037c7f73e6",
        "fromTable": "LQ_Data",
        "fromColumn": "carbon_map",
        "toTable": "LQ_Carbon_MAP",
        "toColumn": "carbon_map"
      }
    ],
    "roles": [
      {
        "name": "IPG_Developers",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Developers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603422"
          }
        ]
      },
      {
        "name": "IPG_ExternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Users",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603440"
          }
        ]
      },
      {
        "name": "IPG_InternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_SuperUsers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603439"
          }
        ]
      },
      {
        "name": "BI user",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "AMR\\ssas_msbitabmd",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2406644"
          }
        ]
      },
      {
        "name": "IPG_Transformation",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG Transformation Data Cube Read",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4820567"
          }
        ]
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "500"
      }
    ]
  },
  "id": "SemanticModel"
}